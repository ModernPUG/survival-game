{"version":3,"file":"loadDDS.mjs","sources":["../../src/loaders/loadDDS.ts"],"sourcesContent":["import { BaseTexture, extensions, ExtensionType, settings, utils, ALPHA_MODES, MIPMAP_MODES } from '@pixi/core';\nimport { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { parseDDS } from '../parsers';\n\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\n\n/** Load our DDS textures! */\nexport const loadDDS: LoaderParser = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.dds');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const resources = parseDDS(arrayBuffer);\n\n        const textures = resources.map((resource) =>\n        {\n            const base = new BaseTexture(resource, {\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                resolution: utils.getResolutionOfUrl(url),\n                ...asset.data,\n            });\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadDDS);\n"],"names":[],"mappings":";;;;;AAQO,MAAM,OAAwB,GAAA;AAAA,EACjC,SAAW,EAAA;AAAA,IACP,MAAM,aAAc,CAAA,UAAA;AAAA,IACpB,UAAU,oBAAqB,CAAA,IAAA;AAAA,GACnC;AAAA,EAEA,KAAK,GACL,EAAA;AACI,IAAO,OAAA,cAAA,CAAe,KAAK,MAAM,CAAA,CAAA;AAAA,GACrC;AAAA,EAEA,MAAM,IAAA,CAAK,GAAa,EAAA,KAAA,EAAkB,MAC1C,EAAA;AAEI,IAAA,MAAM,QAAW,GAAA,MAAM,QAAS,CAAA,OAAA,CAAQ,MAAM,GAAG,CAAA,CAAA;AAEjD,IAAM,MAAA,WAAA,GAAc,MAAM,QAAA,CAAS,WAAY,EAAA,CAAA;AAE/C,IAAM,MAAA,SAAA,GAAY,SAAS,WAAW,CAAA,CAAA;AAEtC,IAAA,MAAM,QAAW,GAAA,SAAA,CAAU,GAAI,CAAA,CAAC,QAChC,KAAA;AACI,MAAM,MAAA,IAAA,GAAO,IAAI,WAAA,CAAY,QAAU,EAAA;AAAA,QACnC,QAAQ,YAAa,CAAA,GAAA;AAAA,QACrB,WAAW,WAAY,CAAA,sBAAA;AAAA,QACvB,UAAA,EAAY,KAAM,CAAA,kBAAA,CAAmB,GAAG,CAAA;AAAA,QACxC,GAAG,KAAM,CAAA,IAAA;AAAA,OACZ,CAAA,CAAA;AAED,MAAO,OAAA,aAAA,CAAc,IAAM,EAAA,MAAA,EAAQ,GAAG,CAAA,CAAA;AAAA,KACzC,CAAA,CAAA;AAED,IAAA,OAAO,QAAS,CAAA,MAAA,KAAW,CAAI,GAAA,QAAA,CAAS,CAAK,CAAA,GAAA,QAAA,CAAA;AAAA,GACjD;AAAA,EAEA,OAAO,OACP,EAAA;AACI,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,OAAO,CACzB,EAAA;AACI,MAAA,OAAA,CAAQ,QAAQ,CAAC,CAAA,KAAM,CAAE,CAAA,OAAA,CAAQ,IAAI,CAAC,CAAA,CAAA;AAAA,KAG1C,MAAA;AACI,MAAA,OAAA,CAAQ,QAAQ,IAAI,CAAA,CAAA;AAAA,KACxB;AAAA,GACJ;AAEJ,EAAA;AAEA,UAAA,CAAW,IAAI,OAAO,CAAA;;;;"}