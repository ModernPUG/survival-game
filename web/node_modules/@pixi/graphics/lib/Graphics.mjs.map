{"version":3,"file":"Graphics.mjs","sources":["../src/Graphics.ts"],"sourcesContent":["import {\n    Circle,\n    Ellipse,\n    PI_2,\n    Point,\n    Polygon,\n    Rectangle,\n    RoundedRectangle,\n    Matrix,\n    SHAPES,\n    BLEND_MODES,\n    Texture,\n    UniformGroup,\n    State,\n    Shader,\n    utils\n} from '@pixi/core';\n\nimport { BezierUtils, QuadraticUtils, ArcUtils } from './utils';\nimport { GraphicsGeometry } from './GraphicsGeometry';\nimport { FillStyle } from './styles/FillStyle';\nimport { LineStyle } from './styles/LineStyle';\nimport { Container } from '@pixi/display';\nimport { LINE_JOIN, LINE_CAP } from './const';\n\nimport type { IShape, IPointData, Renderer, BatchDrawCall } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/** Batch element computed from Graphics geometry */\nexport interface IGraphicsBatchElement\n{\n    vertexData: Float32Array;\n    blendMode: BLEND_MODES;\n    indices: Uint16Array | Uint32Array;\n    uvs: Float32Array;\n    alpha: number;\n    worldAlpha: number;\n    _batchRGB: number[];\n    _tintRGB: number;\n    _texture: Texture;\n}\n\nexport interface IFillStyleOptions\n{\n    color?: number;\n    alpha?: number;\n    texture?: Texture;\n    matrix?: Matrix;\n}\n\nexport interface ILineStyleOptions extends IFillStyleOptions\n{\n    width?: number;\n    alignment?: number;\n    native?: boolean;\n    cap?: LINE_CAP;\n    join?: LINE_JOIN;\n    miterLimit?: number;\n}\n\nconst temp = new Float32Array(3);\n\n// a default shaders map used by graphics..\nconst DEFAULT_SHADERS: {[key: string]: Shader} = {};\n\nexport interface Graphics extends GlobalMixins.Graphics, Container {}\n\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n *\n * Please note that due to legacy naming conventions, the behavior of some functions in this class\n * can be confusing.  Each call to `drawRect()`, `drawPolygon()`, etc. actually stores that primitive\n * in the Geometry class's GraphicsGeometry object for later use in rendering or hit testing - the\n * functions do not directly draw anything to the screen.  Similarly, the `clear()` function doesn't\n * change the screen, it simply resets the list of primitives, which can be useful if you want to\n * rebuild the contents of an existing Graphics object.\n *\n * Once a GraphicsGeometry list is built, you can re-use it in other Geometry objects as\n * an optimization, by passing it into a new Geometry object's constructor.  Because of this\n * ability, it's important to call `destroy()` on Geometry objects once you are done with them, to\n * properly dereference each GraphicsGeometry and prevent memory leaks.\n * @memberof PIXI\n */\nexport class Graphics extends Container\n{\n    /**\n     * Temporary point to use for containsPoint.\n     * @private\n     */\n    static _TEMP_POINT = new Point();\n\n    /**\n     * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n     * Can be shared between multiple Graphics objects.\n     */\n    public shader: Shader = null;\n\n    /** Renderer plugin for batching */\n    public pluginName = 'batch';\n\n    /**\n     * Current path\n     * @readonly\n     */\n    public currentPath: Polygon = null;\n\n    /** A collections of batches! These can be drawn by the renderer batch system. */\n    protected batches: Array<IGraphicsBatchElement> = [];\n\n    /** Update dirty for limiting calculating tints for batches. */\n    protected batchTint = -1;\n\n    /** Update dirty for limiting calculating batches.*/\n    protected batchDirty = -1;\n\n    /** Copy of the object vertex data. */\n    protected vertexData: Float32Array = null;\n\n    /** Current fill style. */\n    protected _fillStyle: FillStyle = new FillStyle();\n\n    /** Current line style. */\n    protected _lineStyle: LineStyle = new LineStyle();\n\n    /** Current shape transform matrix. */\n    protected _matrix: Matrix = null;\n\n    /** Current hole mode is enabled. */\n    protected _holeMode = false;\n    protected _transformID: number;\n    protected _tint: number;\n\n    /**\n     * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n     * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n     */\n    private state: State = State.for2d();\n    private _geometry: GraphicsGeometry;\n\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n     * @readonly\n     */\n    public get geometry(): GraphicsGeometry\n    {\n        return this._geometry;\n    }\n\n    /**\n     * @param geometry - Geometry to use, if omitted will create a new GraphicsGeometry instance.\n     */\n    constructor(geometry: GraphicsGeometry = null)\n    {\n        super();\n\n        this._geometry = geometry || new GraphicsGeometry();\n        this._geometry.refCount++;\n\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n\n        this._transformID = -1;\n\n        // Set default\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n    }\n\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)\n     * @returns - A clone of the graphics object\n     */\n    public clone(): Graphics\n    {\n        this.finishPoly();\n\n        return new Graphics(this._geometry);\n    }\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.  Note that, since each\n     * primitive in the GraphicsGeometry list is rendered sequentially, modes\n     * such as `PIXI.BLEND_MODES.ADD` and `PIXI.BLEND_MODES.MULTIPLY` will\n     * be applied per-primitive.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    public get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * The tint applied to each graphic shape. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        this._tint = value;\n    }\n\n    /**\n     * The current fill style.\n     * @readonly\n     */\n    public get fill(): FillStyle\n    {\n        return this._fillStyle;\n    }\n\n    /**\n     * The current line style.\n     * @readonly\n     */\n    public get line(): LineStyle\n    {\n        return this._lineStyle;\n    }\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     * @param [width=0] - width of the line to draw, will update the objects stored style\n     * @param [color=0x0] - color of the line to draw, will update the objects stored style\n     * @param [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public lineStyle(width: number, color?: number, alpha?: number, alignment?: number, native?: boolean): this;\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     * @param options - Line style options\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineStyle(options?: ILineStyleOptions): this;\n\n    public lineStyle(options: ILineStyleOptions | number = null,\n        color = 0x0, alpha = 1, alignment = 0.5, native = false): this\n    {\n        // Support non-object params: (width, color, alpha, alignment, native)\n        if (typeof options === 'number')\n        {\n            options = { width: options, color, alpha, alignment, native } as ILineStyleOptions;\n        }\n\n        return this.lineTextureStyle(options);\n    }\n\n    /**\n     * Like line style but support texture for line fill.\n     * @param [options] - Collection of options for setting line style.\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n     *  Default 0xFFFFFF if texture present.\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineTextureStyle(options?: ILineStyleOptions): this\n    {\n        // Apply defaults\n        options = Object.assign({\n            width: 0,\n            texture: Texture.WHITE,\n            color: options?.texture ? 0xFFFFFF : 0x0,\n            alpha: 1,\n            matrix: null,\n            alignment: 0.5,\n            native: false,\n            cap: LINE_CAP.BUTT,\n            join: LINE_JOIN.MITER,\n            miterLimit: 10,\n        }, options);\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.width > 0 && options.alpha > 0;\n\n        if (!visible)\n        {\n            this._lineStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._lineStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Start a polygon object internally.\n     * @protected\n     */\n    protected startPoly(): void\n    {\n        if (this.currentPath)\n        {\n            const points = this.currentPath.points;\n            const len = this.currentPath.points.length;\n\n            if (len > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = new Polygon();\n                this.currentPath.closeStroke = false;\n                this.currentPath.points.push(points[len - 2], points[len - 1]);\n            }\n        }\n        else\n        {\n            this.currentPath = new Polygon();\n            this.currentPath.closeStroke = false;\n        }\n    }\n\n    /**\n     * Finish the polygon object.\n     * @protected\n     */\n    finishPoly(): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = null;\n            }\n            else\n            {\n                this.currentPath.points.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Moves the current drawing position to x, y.\n     * @param x - the X coordinate to move to\n     * @param y - the Y coordinate to move to\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this.startPoly();\n        this.currentPath.points[0] = x;\n        this.currentPath.points[1] = y;\n\n        return this;\n    }\n\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     * @param x - the X coordinate to draw to\n     * @param y - the Y coordinate to draw to\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public lineTo(x: number, y: number): this\n    {\n        if (!this.currentPath)\n        {\n            this.moveTo(0, 0);\n        }\n\n        // remove duplicates..\n        const points = this.currentPath.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Initialize the curve\n     * @param x\n     * @param y\n     */\n    protected _initCurve(x = 0, y = 0): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length === 0)\n            {\n                this.currentPath.points = [x, y];\n            }\n        }\n        else\n        {\n            this.moveTo(x, y);\n        }\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public quadraticCurveTo(cpX: number, cpY: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        const points = this.currentPath.points;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param cpX2 - Second Control point x\n     * @param cpY2 - Second Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @returns This Graphics object. Good for chaining method calls\n     */\n    public bezierCurveTo(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n\n        return this;\n    }\n\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     * @param x1 - The x-coordinate of the first tangent point of the arc\n     * @param y1 - The y-coordinate of the first tangent point of the arc\n     * @param x2 - The x-coordinate of the end of the arc\n     * @param y2 - The y-coordinate of the end of the arc\n     * @param radius - The radius of the arc\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._initCurve(x1, y1);\n\n        const points = this.currentPath.points;\n\n        const result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n\n        if (result)\n        {\n            const { cx, cy, radius, startAngle, endAngle, anticlockwise } = result;\n\n            this.arc(cx, cy, radius, startAngle, endAngle, anticlockwise);\n        }\n\n        return this;\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     * @param cx - The x-coordinate of the center of the circle\n     * @param cy - The y-coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param endAngle - The ending angle, in radians\n     * @param anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public arc(cx: number, cy: number, radius: number, startAngle: number, endAngle: number, anticlockwise = false): this\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += PI_2;\n        }\n\n        const sweep = endAngle - startAngle;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n        const eps = this._geometry.closePointEps;\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.points : null;\n\n        if (points)\n        {\n            // TODO: make a better fix.\n\n            // We check how far our start is from the last existing point\n            const xDiff = Math.abs(points[points.length - 2] - startX);\n            const yDiff = Math.abs(points[points.length - 1] - startY);\n\n            if (xDiff < eps && yDiff < eps)\n            {\n                // If the point is very close, we don't add it, since this would lead to artifacts\n                // during tessellation due to floating point imprecision.\n            }\n            else\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.points;\n        }\n\n        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n\n        return this;\n    }\n\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     * @param color - the color of the fill\n     * @param alpha - the alpha of the fill\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public beginFill(color = 0, alpha = 1): this\n    {\n        return this.beginTextureFill({ texture: Texture.WHITE, color, alpha });\n    }\n\n    /**\n     * Begin the texture fill.\n     * Note: The wrap mode of the texture is forced to REPEAT on render.\n     * @param options - Object object.\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n     * @param {number} [options.color=0xffffff] - Background to fill behind texture\n     * @param {number} [options.alpha=1] - Alpha of fill\n     * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginTextureFill(options?: IFillStyleOptions): this\n    {\n        // Apply defaults\n        options = Object.assign({\n            texture: Texture.WHITE,\n            color: 0xFFFFFF,\n            alpha: 1,\n            matrix: null,\n        }, options) as IFillStyleOptions;\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.alpha > 0;\n\n        if (!visible)\n        {\n            this._fillStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._fillStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public endFill(): this\n    {\n        this.finishPoly();\n\n        this._fillStyle.reset();\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape.\n     * @param x - The X coord of the top-left of the rectangle\n     * @param y - The Y coord of the top-left of the rectangle\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawRect(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Rectangle(x, y, width, height));\n    }\n\n    /**\n     * Draw a rectangle shape with rounded/beveled corners.\n     * @param x - The X coord of the top-left of the rectangle\n     * @param y - The Y coord of the top-left of the rectangle\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param radius - Radius of the rectangle corners\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawRoundedRect(x: number, y: number, width: number, height: number, radius: number): this\n    {\n        return this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n    }\n\n    /**\n     * Draws a circle.\n     * @param x - The X coordinate of the center of the circle\n     * @param y - The Y coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawCircle(x: number, y: number, radius: number): this\n    {\n        return this.drawShape(new Circle(x, y, radius));\n    }\n\n    /**\n     * Draws an ellipse.\n     * @param x - The X coordinate of the center of the ellipse\n     * @param y - The Y coordinate of the center of the ellipse\n     * @param width - The half width of the ellipse\n     * @param height - The half height of the ellipse\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawEllipse(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Ellipse(x, y, width, height));\n    }\n\n    public drawPolygon(...path: Array<number> | Array<IPointData>): this;\n    public drawPolygon(path: Array<number> | Array<IPointData> | Polygon): this;\n\n    /**\n     * Draws a polygon using the given path.\n     * @param {number[]|PIXI.IPointData[]|PIXI.Polygon} path - The path data used to construct the polygon.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawPolygon(...path: any[]): this\n    {\n        let points: Array<number> | Array<IPointData>;\n        let closeStroke = true;// !!this._fillStyle;\n\n        const poly = path[0] as Polygon;\n\n        // check if data has points..\n        if (poly.points)\n        {\n            closeStroke = poly.closeStroke;\n            points = poly.points;\n        }\n        else\n        if (Array.isArray(path[0]))\n        {\n            points = path[0];\n        }\n        else\n        {\n            points = path;\n        }\n\n        const shape = new Polygon(points);\n\n        shape.closeStroke = closeStroke;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draw any shape.\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawShape(shape: IShape): this\n    {\n        if (!this._holeMode)\n        {\n            this._geometry.drawShape(\n                shape,\n                this._fillStyle.clone(),\n                this._lineStyle.clone(),\n                this._matrix\n            );\n        }\n        else\n        {\n            this._geometry.drawHole(shape, this._matrix);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public clear(): this\n    {\n        this._geometry.clear();\n        this._lineStyle.reset();\n        this._fillStyle.reset();\n\n        this._boundsID++;\n        this._matrix = null;\n        this._holeMode = false;\n        this.currentPath = null;\n\n        return this;\n    }\n\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     * @returns - True if only 1 rect.\n     */\n    public isFastRect(): boolean\n    {\n        const data = this._geometry.graphicsData;\n\n        return data.length === 1\n            && data[0].shape.type === SHAPES.RECT\n            && !data[0].matrix\n            && !data[0].holes.length\n            && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n        // batch part..\n        // batch it!\n\n        geometry.updateBatches();\n\n        if (geometry.batchable)\n        {\n            if (this.batchDirty !== geometry.batchDirty)\n            {\n                this._populateBatches();\n            }\n\n            this._renderBatched(renderer);\n        }\n        else\n        {\n            // no batching...\n            renderer.batch.flush();\n\n            this._renderDirect(renderer);\n        }\n    }\n\n    /** Populating batches for rendering. */\n    protected _populateBatches(): void\n    {\n        const geometry = this._geometry;\n        const blendMode = this.blendMode;\n        const len = geometry.batches.length;\n\n        this.batchTint = -1;\n        this._transformID = -1;\n        this.batchDirty = geometry.batchDirty;\n        this.batches.length = len;\n\n        this.vertexData = new Float32Array(geometry.points);\n\n        for (let i = 0; i < len; i++)\n        {\n            const gI = geometry.batches[i];\n            const color = gI.style.color;\n            const vertexData = new Float32Array(this.vertexData.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const uvs = new Float32Array(geometry.uvsFloat32.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const indices = new Uint16Array(geometry.indicesUint16.buffer,\n                gI.start * 2,\n                gI.size);\n\n            const batch = {\n                vertexData,\n                blendMode,\n                indices,\n                uvs,\n                _batchRGB: utils.hex2rgb(color) as Array<number>,\n                _tintRGB: color,\n                _texture: gI.style.texture,\n                alpha: gI.style.alpha,\n                worldAlpha: 1 };\n\n            this.batches[i] = batch;\n        }\n    }\n\n    /**\n     * Renders the batches using the BathedRenderer plugin\n     * @param renderer - The renderer\n     */\n    protected _renderBatched(renderer: Renderer): void\n    {\n        if (!this.batches.length)\n        {\n            return;\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n\n        this.calculateVertices();\n        this.calculateTints();\n\n        for (let i = 0, l = this.batches.length; i < l; i++)\n        {\n            const batch = this.batches[i];\n\n            batch.worldAlpha = this.worldAlpha * batch.alpha;\n\n            renderer.plugins[this.pluginName].render(batch);\n        }\n    }\n\n    /**\n     * Renders the graphics direct\n     * @param renderer - The renderer\n     */\n    protected _renderDirect(renderer: Renderer): void\n    {\n        const shader = this._resolveDirectShader(renderer);\n\n        const geometry = this._geometry;\n        const tint = this.tint;\n        const worldAlpha = this.worldAlpha;\n        const uniforms = shader.uniforms;\n        const drawCalls = geometry.drawCalls;\n\n        // lets set the transfomr\n        uniforms.translationMatrix = this.transform.worldTransform;\n\n        // and then lets set the tint..\n        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[3] = worldAlpha;\n\n        // the first draw call, we can set the uniforms of the shader directly here.\n\n        // this means that we can tack advantage of the sync function of pixi!\n        // bind and sync uniforms..\n        // there is a way to optimise this..\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(geometry, shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // then render the rest of them...\n        for (let i = 0, l = drawCalls.length; i < l; i++)\n        {\n            this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n        }\n    }\n\n    /**\n     * Renders specific DrawCall\n     * @param renderer\n     * @param drawCall\n     */\n    protected _renderDrawCallDirect(renderer: Renderer, drawCall: BatchDrawCall): void\n    {\n        const { texArray, type, size, start } = drawCall;\n        const groupTextureCount = texArray.count;\n\n        for (let j = 0; j < groupTextureCount; j++)\n        {\n            renderer.texture.bind(texArray.elements[j], j);\n        }\n\n        renderer.geometry.draw(type, size, start);\n    }\n\n    /**\n     * Resolves shader for direct rendering\n     * @param renderer - The renderer\n     */\n    protected _resolveDirectShader(renderer: Renderer): Shader\n    {\n        let shader = this.shader;\n\n        const pluginName = this.pluginName;\n\n        if (!shader)\n        {\n            // if there is no shader here, we can use the default shader.\n            // and that only gets created if we actually need it..\n            // but may be more than one plugins for graphics\n            if (!DEFAULT_SHADERS[pluginName])\n            {\n                const { MAX_TEXTURES } = renderer.plugins[pluginName];\n                const sampleValues = new Int32Array(MAX_TEXTURES);\n\n                for (let i = 0; i < MAX_TEXTURES; i++)\n                {\n                    sampleValues[i] = i;\n                }\n\n                const uniforms = {\n                    tint: new Float32Array([1, 1, 1, 1]),\n                    translationMatrix: new Matrix(),\n                    default: UniformGroup.from({ uSamplers: sampleValues }, true),\n                };\n\n                const program = renderer.plugins[pluginName]._shader.program;\n\n                DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);\n            }\n\n            shader = DEFAULT_SHADERS[pluginName];\n        }\n\n        return shader;\n    }\n\n    /** Retrieves the bounds of the graphic shape as a rectangle object. */\n    protected _calculateBounds(): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n\n        // skipping when graphics is empty, like a container\n        if (!geometry.graphicsData.length)\n        {\n            return;\n        }\n\n        const { minX, minY, maxX, maxY } = geometry.bounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Tests if a point is inside this graphics object\n     * @param point - the point to test\n     * @returns - the result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);\n\n        return this._geometry.containsPoint(Graphics._TEMP_POINT);\n    }\n\n    /** Recalculate the tint by applying tint to batches using Graphics tint. */\n    protected calculateTints(): void\n    {\n        if (this.batchTint !== this.tint)\n        {\n            this.batchTint = this.tint;\n\n            const tintRGB = utils.hex2rgb(this.tint, temp);\n\n            for (let i = 0; i < this.batches.length; i++)\n            {\n                const batch = this.batches[i];\n\n                const batchTint = batch._batchRGB;\n\n                const r = (tintRGB[0] * batchTint[0]) * 255;\n                const g = (tintRGB[1] * batchTint[1]) * 255;\n                const b = (tintRGB[2] * batchTint[2]) * 255;\n\n                // TODO Ivan, can this be done in one go?\n                const color = (r << 16) + (g << 8) + (b | 0);\n\n                batch._tintRGB = (color >> 16)\n                        + (color & 0xff00)\n                        + ((color & 0xff) << 16);\n            }\n        }\n    }\n\n    /** If there's a transform update or a change to the shape of the geometry, recalculate the vertices. */\n    protected calculateVertices(): void\n    {\n        const wtID = this.transform._worldID;\n\n        if (this._transformID === wtID)\n        {\n            return;\n        }\n\n        this._transformID = wtID;\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const data = this._geometry.points;// batch.vertexDataOriginal;\n        const vertexData = this.vertexData;\n\n        let count = 0;\n\n        for (let i = 0; i < data.length; i += 2)\n        {\n            const x = data[i];\n            const y = data[i + 1];\n\n            vertexData[count++] = (a * x) + (c * y) + tx;\n            vertexData[count++] = (d * y) + (b * x) + ty;\n        }\n    }\n\n    /**\n     * Closes the current path.\n     * @returns - Returns itself.\n     */\n    public closePath(): this\n    {\n        const currentPath = this.currentPath;\n\n        if (currentPath)\n        {\n            // we don't need to add extra point in the end because buildLine will take care of that\n            currentPath.closeStroke = true;\n            // ensure that the polygon is completed, and is available for hit detection\n            // (even if the graphics is not rendered yet)\n            this.finishPoly();\n        }\n\n        return this;\n    }\n\n    /**\n     * Apply a matrix to the positional data.\n     * @param matrix - Matrix to use for transform current shape.\n     * @returns - Returns itself.\n     */\n    public setMatrix(matrix: Matrix): this\n    {\n        this._matrix = matrix;\n\n        return this;\n    }\n\n    /**\n     * Begin adding holes to the last draw shape\n     * IMPORTANT: holes must be fully inside a shape to work\n     * Also weirdness ensues if holes overlap!\n     * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n     * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n     * @returns - Returns itself.\n     */\n    public beginHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = true;\n\n        return this;\n    }\n\n    /**\n     * End adding holes to the last draw shape.\n     * @returns - Returns itself.\n     */\n    public endHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = false;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     * @param options - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        this._geometry.refCount--;\n        if (this._geometry.refCount === 0)\n        {\n            this._geometry.dispose();\n        }\n\n        this._matrix = null;\n        this.currentPath = null;\n        this._lineStyle.destroy();\n        this._lineStyle = null;\n        this._fillStyle.destroy();\n        this._fillStyle = null;\n        this._geometry = null;\n        this.shader = null;\n        this.vertexData = null;\n        this.batches.length = 0;\n        this.batches = null;\n\n        super.destroy(options);\n    }\n}\n"],"names":[],"mappings":"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"}