{"version":3,"file":"loadBitmapFont.js","sources":["../src/loadBitmapFont.ts"],"sourcesContent":["import type { Texture } from '@pixi/core';\nimport { settings, utils, extensions, ExtensionType } from '@pixi/core';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport { LoaderParserPriority } from '@pixi/assets';\nimport { BitmapFont } from './BitmapFont';\nimport type { BitmapFontData } from './BitmapFontData';\nimport { TextFormat, XMLStringFormat } from './formats';\n\nconst validExtensions = ['.xml', '.fnt'];\n\n/** simple loader plugin for loading in bitmap fonts! */\nexport const loadBitmapFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Normal,\n    },\n\n    test(url: string): boolean\n    {\n        return validExtensions.includes(utils.path.extname(url));\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return TextFormat.test(data) || XMLStringFormat.test(data);\n    },\n\n    async parse(asset: string, data: LoadAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const fontData: BitmapFontData = TextFormat.test(asset)\n            ? TextFormat.parse(asset)\n            : XMLStringFormat.parse(asset);\n\n        const { src } = data;\n        const { page: pages } = fontData;\n        const textureUrls = [];\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].file;\n            const imagePath = utils.path.join(utils.path.dirname(src), pageFile);\n\n            textureUrls.push(imagePath);\n        }\n\n        const loadedTextures = await loader.load(textureUrls) as Record<string, Texture>;\n        const textures = textureUrls.map((url) => loadedTextures[url]);\n\n        return BitmapFont.install(fontData, textures, true);\n    },\n\n    async load(url: string, _options: LoadAsset): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    unload(bitmapFont: BitmapFont): void\n    {\n        bitmapFont.destroy();\n    }\n} as LoaderParser<BitmapFont | string>;\n\nextensions.add(loadBitmapFont);\n"],"names":["ExtensionType","LoaderParserPriority","utils","TextFormat","XMLStringFormat","BitmapFont","settings","extensions"],"mappings":";;;;;;;;;;;AASA,MAAM,eAAA,GAAkB,CAAC,MAAA,EAAQ,MAAM,CAAA,CAAA;AAGhC,MAAM,cAAiB,GAAA;AAAA,EAC1B,SAAW,EAAA;AAAA,IACP,MAAMA,kBAAc,CAAA,UAAA;AAAA,IACpB,UAAUC,2BAAqB,CAAA,MAAA;AAAA,GACnC;AAAA,EAEA,KAAK,GACL,EAAA;AACI,IAAA,OAAO,gBAAgB,QAAS,CAAAC,UAAA,CAAM,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAC,CAAA,CAAA;AAAA,GAC3D;AAAA,EAEA,MAAM,UAAU,IAChB,EAAA;AACI,IAAA,OAAOC,sBAAW,IAAK,CAAA,IAAI,CAAK,IAAAC,+BAAA,CAAgB,KAAK,IAAI,CAAA,CAAA;AAAA,GAC7D;AAAA,EAEA,MAAM,KAAA,CAAM,KAAe,EAAA,IAAA,EAAiB,MAC5C,EAAA;AACI,IAAM,MAAA,QAAA,GAA2BD,qBAAW,CAAA,IAAA,CAAK,KAAK,CAAA,GAChDA,qBAAW,CAAA,KAAA,CAAM,KAAK,CAAA,GACtBC,+BAAgB,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AAEjC,IAAA,MAAM,EAAE,GAAQ,EAAA,GAAA,IAAA,CAAA;AAChB,IAAM,MAAA,EAAE,MAAM,KAAU,EAAA,GAAA,QAAA,CAAA;AACxB,IAAA,MAAM,cAAc,EAAC,CAAA;AAErB,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,EAAQ,EAAE,CACpC,EAAA;AACI,MAAM,MAAA,QAAA,GAAW,MAAM,CAAG,CAAA,CAAA,IAAA,CAAA;AAC1B,MAAM,MAAA,SAAA,GAAYF,WAAM,IAAK,CAAA,IAAA,CAAKA,WAAM,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA,EAAG,QAAQ,CAAA,CAAA;AAEnE,MAAA,WAAA,CAAY,KAAK,SAAS,CAAA,CAAA;AAAA,KAC9B;AAEA,IAAA,MAAM,cAAiB,GAAA,MAAM,MAAO,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AACpD,IAAA,MAAM,WAAW,WAAY,CAAA,GAAA,CAAI,CAAC,GAAA,KAAQ,eAAe,GAAI,CAAA,CAAA,CAAA;AAE7D,IAAA,OAAOG,qBAAW,CAAA,OAAA,CAAQ,QAAU,EAAA,QAAA,EAAU,IAAI,CAAA,CAAA;AAAA,GACtD;AAAA,EAEA,MAAM,IAAK,CAAA,GAAA,EAAa,QACxB,EAAA;AACI,IAAA,MAAM,QAAW,GAAA,MAAMC,aAAS,CAAA,OAAA,CAAQ,MAAM,GAAG,CAAA,CAAA;AAEjD,IAAA,OAAO,SAAS,IAAK,EAAA,CAAA;AAAA,GACzB;AAAA,EAEA,OAAO,UACP,EAAA;AACI,IAAA,UAAA,CAAW,OAAQ,EAAA,CAAA;AAAA,GACvB;AACJ,EAAA;AAEAC,eAAA,CAAW,IAAI,cAAc,CAAA;;;;"}