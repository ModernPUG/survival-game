{"version":3,"file":"CanvasRenderTarget.js","sources":["../../src/media/CanvasRenderTarget.ts"],"sourcesContent":["import { settings } from '@pixi/settings';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/settings';\n\n/**\n * Creates a Canvas element of the given size to be used as a target for rendering to.\n * @class\n * @memberof PIXI.utils\n */\nexport class CanvasRenderTarget\n{\n    /** The Canvas object that belongs to this CanvasRenderTarget. */\n    public canvas: ICanvas;\n\n    /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\n    public context: ICanvasRenderingContext2D;\n\n    /**\n     * The resolution / device pixel ratio of the canvas\n     * @default 1\n     */\n    public resolution: number;\n\n    /**\n     * @param width - the width for the newly created canvas\n     * @param height - the height for the newly created canvas\n     * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\n     */\n    constructor(width: number, height: number, resolution?: number)\n    {\n        this.canvas = settings.ADAPTER.createCanvas();\n\n        this.context = this.canvas.getContext('2d');\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this.resize(width, height);\n    }\n\n    /**\n     * Clears the canvas that was created by the CanvasRenderTarget class.\n     * @private\n     */\n    clear(): void\n    {\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Resizes the canvas to the specified width and height.\n     * @param desiredWidth - the desired width of the canvas\n     * @param desiredHeight - the desired height of the canvas\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        this.canvas.width = Math.round(desiredWidth * this.resolution);\n        this.canvas.height = Math.round(desiredHeight * this.resolution);\n    }\n\n    /** Destroys this canvas. */\n    destroy(): void\n    {\n        this.context = null;\n        this.canvas = null;\n    }\n\n    /**\n     * The width of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get width(): number\n    {\n        return this.canvas.width;\n    }\n\n    set width(val: number)\n    {\n        this.canvas.width = Math.round(val);\n    }\n\n    /**\n     * The height of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get height(): number\n    {\n        return this.canvas.height;\n    }\n\n    set height(val: number)\n    {\n        this.canvas.height = Math.round(val);\n    }\n}\n"],"names":["settings"],"mappings":";;;;;;AASO,MAAM,kBACb,CAAA;AAAA,EAkBI,WAAA,CAAY,KAAe,EAAA,MAAA,EAAgB,UAC3C,EAAA;AACI,IAAK,IAAA,CAAA,MAAA,GAASA,iBAAS,CAAA,OAAA,CAAQ,YAAa,EAAA,CAAA;AAE5C,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAK,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AAE1C,IAAK,IAAA,CAAA,UAAA,GAAa,cAAcA,iBAAS,CAAA,UAAA,CAAA;AAEzC,IAAK,IAAA,CAAA,MAAA,CAAO,OAAO,MAAM,CAAA,CAAA;AAAA,GAC7B;AAAA,EAMA,KACA,GAAA;AACI,IAAA,IAAA,CAAK,QAAQ,YAAa,CAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAC1C,IAAK,IAAA,CAAA,OAAA,CAAQ,UAAU,CAAG,EAAA,CAAA,EAAG,KAAK,MAAO,CAAA,KAAA,EAAO,IAAK,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAAA,GACtE;AAAA,EAOA,MAAA,CAAO,cAAsB,aAC7B,EAAA;AACI,IAAA,IAAA,CAAK,OAAO,KAAQ,GAAA,IAAA,CAAK,KAAM,CAAA,YAAA,GAAe,KAAK,UAAU,CAAA,CAAA;AAC7D,IAAA,IAAA,CAAK,OAAO,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,aAAA,GAAgB,KAAK,UAAU,CAAA,CAAA;AAAA,GACnE;AAAA,EAGA,OACA,GAAA;AACI,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AACf,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AAAA,GAClB;AAAA,EAMA,IAAI,KACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,KAAA,CAAA;AAAA,GACvB;AAAA,EAEA,IAAI,MAAM,GACV,EAAA;AACI,IAAA,IAAA,CAAK,MAAO,CAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAAA,GACtC;AAAA,EAMA,IAAI,MACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,MAAA,CAAA;AAAA,GACvB;AAAA,EAEA,IAAI,OAAO,GACX,EAAA;AACI,IAAA,IAAA,CAAK,MAAO,CAAA,MAAA,GAAS,IAAK,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAAA,GACvC;AACJ;;;;"}