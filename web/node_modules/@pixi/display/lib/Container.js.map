{"version":3,"file":"Container.js","sources":["../src/Container.ts"],"sourcesContent":["import { MASK_TYPES, settings, utils } from '@pixi/core';\nimport { DisplayObject } from './DisplayObject';\n\nimport type { MaskData, Renderer, Matrix, Rectangle } from '@pixi/core';\nimport type { IDestroyOptions } from './DisplayObject';\n\nfunction sortChildren(a: DisplayObject, b: DisplayObject): number\n{\n    if (a.zIndex === b.zIndex)\n    {\n        return a._lastSortedIndex - b._lastSortedIndex;\n    }\n\n    return a.zIndex - b.zIndex;\n}\n\nexport interface Container extends GlobalMixins.Container, DisplayObject {}\n\n/**\n * Container is a general-purpose display object that holds children. It also adds built-in support for advanced\n * rendering features like masking and filtering.\n *\n * It is the base class of all display objects that act as a container for other objects, including Graphics\n * and Sprite.\n * @example\n * import { BlurFilter, Container, Graphics, Sprite } from 'pixi.js';\n *\n * const container = new Container();\n * const sprite = Sprite.from('https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png');\n *\n * sprite.width = 512;\n * sprite.height = 512;\n *\n * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container\n * // is rendered.\n * container.addChild(sprite);\n *\n * // Blurs whatever is rendered by the container\n * container.filters = [new BlurFilter()];\n *\n * // Only the contents within a circle at the center should be rendered onto the screen.\n * container.mask = new Graphics()\n *     .beginFill(0xffffff)\n *     .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)\n *     .endFill();\n * @memberof PIXI\n */\nexport class Container<T extends DisplayObject = DisplayObject> extends DisplayObject\n{\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    public readonly children: T[];\n\n    /**\n     * If set to true, the container will sort its children by zIndex value\n     * when updateTransform() is called, or manually if sortChildren() is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as @link https://github.com/pixijs/pixi-display\n     *\n     * Also be aware of that this may not work nicely with the addChildAt() function,\n     * as the zIndex sorting may cause the child to automatically sorted to another position.\n     * @see PIXI.settings.SORTABLE_CHILDREN\n     */\n    public sortableChildren: boolean;\n\n    /**\n     * Should children be sorted by zIndex at the next updateTransform call.\n     *\n     * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n     */\n    public sortDirty: boolean;\n    public parent: Container;\n    public containerUpdateTransform: () => void;\n\n    protected _width: number;\n    protected _height: number;\n\n    constructor()\n    {\n        super();\n\n        this.children = [];\n        this.sortableChildren = settings.SORTABLE_CHILDREN;\n        this.sortDirty = false;\n\n        /**\n         * Fired when a DisplayObject is added to this Container.\n         * @event PIXI.Container#childAdded\n         * @param {PIXI.DisplayObject} child - The child added to the Container.\n         * @param {PIXI.Container} container - The container that added the child.\n         * @param {number} index - The children's index of the added child.\n         */\n\n        /**\n         * Fired when a DisplayObject is removed from this Container.\n         * @event PIXI.DisplayObject#childRemoved\n         * @param {PIXI.DisplayObject} child - The child removed from the Container.\n         * @param {PIXI.Container} container - The container that removed the child.\n         * @param {number} index - The former children's index of the removed child\n         */\n    }\n\n    /**\n     * Overridable method that can be used by Container subclasses whenever the children array is modified.\n     * @param _length\n     */\n    protected onChildrenChange(_length?: number): void\n    {\n        /* empty */\n    }\n\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n     * @returns {PIXI.DisplayObject} - The first child that was added.\n     */\n    addChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the array and add all children\n            for (let i = 0; i < children.length; i++)\n            {\n                // eslint-disable-next-line prefer-rest-params\n                this.addChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\n\n            if (child.parent)\n            {\n                child.parent.removeChild(child);\n            }\n\n            child.parent = this;\n            this.sortDirty = true;\n\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n\n            this.children.push(child);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(this.children.length - 1);\n            this.emit('childAdded', child, this, this.children.length - 1);\n            child.emit('added', this);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n     * @param {PIXI.DisplayObject} child - The child to add\n     * @param {number} index - The index to place the child in\n     * @returns {PIXI.DisplayObject} The child that was added.\n     */\n    addChildAt<U extends T>(child: U, index: number): U\n    {\n        if (index < 0 || index > this.children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        if (child.parent)\n        {\n            child.parent.removeChild(child);\n        }\n\n        child.parent = this;\n        this.sortDirty = true;\n\n        // ensure child transform will be recalculated\n        child.transform._parentID = -1;\n\n        this.children.splice(index, 0, child);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('added', this);\n        this.emit('childAdded', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Swaps the position of 2 Display Objects within this container.\n     * @param child - First display object to swap\n     * @param child2 - Second display object to swap\n     */\n    swapChildren(child: T, child2: T): void\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n        this.onChildrenChange(index1 < index2 ? index1 : index2);\n    }\n\n    /**\n     * Returns the index position of a child DisplayObject instance\n     * @param child - The DisplayObject instance to identify\n     * @returns - The index position of the child display object to identify\n     */\n    getChildIndex(child: T): number\n    {\n        const index = this.children.indexOf(child);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n\n        return index;\n    }\n\n    /**\n     * Changes the position of an existing child in the display object container\n     * @param child - The child DisplayObject instance for which you want to change the index number\n     * @param index - The resulting index number for the child display object\n     */\n    setChildIndex(child: T, index: number): void\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        const currentIndex = this.getChildIndex(child);\n\n        utils.removeItems(this.children, currentIndex, 1); // remove from old position\n        this.children.splice(index, 0, child); // add at new position\n\n        this.onChildrenChange(index);\n    }\n\n    /**\n     * Returns the child at the specified index\n     * @param index - The index to get the child at\n     * @returns - The child at the given index, if any.\n     */\n    getChildAt(index: number): T\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index];\n    }\n\n    /**\n     * Removes one or more children from the container.\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n     * @returns {PIXI.DisplayObject} The first child that was removed.\n     */\n    removeChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the arguments property and remove all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            const index = this.children.indexOf(child);\n\n            if (index === -1) return null;\n\n            child.parent = null;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            utils.removeItems(this.children, index, 1);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(index);\n            child.emit('removed', this);\n            this.emit('childRemoved', child, this, index);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Removes a child from the specified index position.\n     * @param index - The index to get the child from\n     * @returns The child that was removed.\n     */\n    removeChildAt(index: number): T\n    {\n        const child = this.getChildAt(index);\n\n        // ensure child transform will be recalculated..\n        child.parent = null;\n        child.transform._parentID = -1;\n        utils.removeItems(this.children, index, 1);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('removed', this);\n        this.emit('childRemoved', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     * @param beginIndex - The beginning position.\n     * @param endIndex - The ending position. Default value is size of the container.\n     * @returns - List of removed children\n     */\n    removeChildren(beginIndex = 0, endIndex = this.children.length): T[]\n    {\n        const begin = beginIndex;\n        const end = endIndex;\n        const range = end - begin;\n        let removed;\n\n        if (range > 0 && range <= end)\n        {\n            removed = this.children.splice(begin, range);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].parent = null;\n                if (removed[i].transform)\n                {\n                    removed[i].transform._parentID = -1;\n                }\n            }\n\n            this._boundsID++;\n\n            this.onChildrenChange(beginIndex);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].emit('removed', this);\n                this.emit('childRemoved', removed[i], this, i);\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return [];\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    }\n\n    /** Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex. */\n    sortChildren(): void\n    {\n        let sortRequired = false;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            child._lastSortedIndex = i;\n\n            if (!sortRequired && child.zIndex !== 0)\n            {\n                sortRequired = true;\n            }\n        }\n\n        if (sortRequired && this.children.length > 1)\n        {\n            this.children.sort(sortChildren);\n        }\n\n        this.sortDirty = false;\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    updateTransform(): void\n    {\n        if (this.sortableChildren && this.sortDirty)\n        {\n            this.sortChildren();\n        }\n\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n\n        // TODO: check render flags, how to process stuff here\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            if (child.visible)\n            {\n                child.updateTransform();\n            }\n        }\n    }\n\n    /**\n     * Recalculates the bounds of the container.\n     *\n     * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\n     * is limited to its mask's bounds or filterArea, if any is applied.\n     */\n    calculateBounds(): void\n    {\n        this._bounds.clear();\n\n        this._calculateBounds();\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (!child.visible || !child.renderable)\n            {\n                continue;\n            }\n\n            child.calculateBounds();\n\n            // TODO: filter+mask, need to mask both somehow\n            if (child._mask)\n            {\n                const maskObject = ((child._mask as MaskData).isMaskData\n                    ? (child._mask as MaskData).maskObject : child._mask) as Container;\n\n                if (maskObject)\n                {\n                    maskObject.calculateBounds();\n                    this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n                }\n                else\n                {\n                    this._bounds.addBounds(child._bounds);\n                }\n            }\n            else if (child.filterArea)\n            {\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\n            }\n            else\n            {\n                this._bounds.addBounds(child._bounds);\n            }\n        }\n\n        this._bounds.updateID = this._boundsID;\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()\n     * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @param skipChildrenUpdate - Setting to `true` will stop re-calculation of children transforms,\n     *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n     * @returns - The rectangular bounding area.\n     */\n    public getLocalBounds(rect?: Rectangle, skipChildrenUpdate = false): Rectangle\n    {\n        const result = super.getLocalBounds(rect);\n\n        if (!skipChildrenUpdate)\n        {\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                const child = this.children[i];\n\n                if (child.visible)\n                {\n                    child.updateTransform();\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Recalculates the content bounds of this object. This should be overriden to\n     * calculate the bounds of this specific object (not including children).\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        // FILL IN//\n    }\n\n    /**\n     * Renders this object and its children with culling.\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderWithCulling(renderer: Renderer): void\n    {\n        const sourceFrame = renderer.renderTexture.sourceFrame;\n\n        // If the source frame is empty, stop rendering.\n        if (!(sourceFrame.width > 0 && sourceFrame.height > 0))\n        {\n            return;\n        }\n\n        // Render the content of the container only if its bounds intersect with the source frame.\n        // All filters are on the stack at this point, and the filter source frame is bound:\n        // therefore, even if the bounds to non intersect the filter frame, the filter\n        // is still applied and any filter padding that is in the frame is rendered correctly.\n\n        let bounds: Rectangle;\n        let transform: Matrix;\n\n        // If cullArea is set, we use this rectangle instead of the bounds of the object. The cullArea\n        // rectangle must completely contain the container and its children including filter padding.\n        if (this.cullArea)\n        {\n            bounds = this.cullArea;\n            transform = this.worldTransform;\n        }\n        // If the container doesn't override _render, we can skip the bounds calculation and intersection test.\n        else if (this._render !== Container.prototype._render)\n        {\n            bounds = this.getBounds(true);\n        }\n\n        // Render the container if the source frame intersects the bounds.\n        if (bounds && sourceFrame.intersects(bounds, transform))\n        {\n            this._render(renderer);\n        }\n        // If the bounds are defined by cullArea and do not intersect with the source frame, stop rendering.\n        else if (this.cullArea)\n        {\n            return;\n        }\n\n        // Unless cullArea is set, we cannot skip the children if the bounds of the container do not intersect\n        // the source frame, because the children might have filters with nonzero padding, which may intersect\n        // with the source frame while the bounds do not: filter padding is not included in the bounds.\n\n        // If cullArea is not set, render the children with culling temporarily enabled so that they are not rendered\n        // if they are out of frame; otherwise, render the children normally.\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n            const childCullable = child.cullable;\n\n            child.cullable = childCullable || !this.cullArea;\n            child.render(renderer);\n            child.cullable = childCullable;\n        }\n    }\n\n    /**\n     * Renders the object using the WebGL renderer.\n     *\n     * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\n     * container itself. This `render` method will invoke it, and also invoke the `render` methods of all\n     * children afterward.\n     *\n     * If `renderable` or `visible` is false or if `worldAlpha` is not positive or if `cullable` is true and\n     * the bounds of this object are out of frame, this implementation will entirely skip rendering.\n     * See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,\n     * setting alpha to zero is not recommended for purely skipping rendering.\n     *\n     * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\n     * advised to employ **culling** to automatically skip rendering objects outside of the current screen.\n     * See [cullable]{@link PIXI.DisplayObject#cullable} and [cullArea]{@link PIXI.DisplayObject#cullArea}.\n     * Other culling methods might be better suited for a large number static objects; see\n     * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n     * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull}.\n     *\n     * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\n     * filtering is applied on a container. This does, however, break batching and can affect performance when\n     * masking and filtering is applied extensively throughout the scene graph.\n     * @param renderer - The renderer\n     */\n    render(renderer: Renderer): void\n    {\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask || this.filters?.length)\n        {\n            this.renderAdvanced(renderer);\n        }\n        else if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n    }\n\n    /**\n     * Render the object using the WebGL renderer and advanced features.\n     * @param renderer - The renderer\n     */\n    protected renderAdvanced(renderer: Renderer): void\n    {\n        const filters = this.filters;\n        const mask = this._mask as MaskData;\n\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (filters)\n        {\n            if (!this._enabledFilters)\n            {\n                this._enabledFilters = [];\n            }\n\n            this._enabledFilters.length = 0;\n\n            for (let i = 0; i < filters.length; i++)\n            {\n                if (filters[i].enabled)\n                {\n                    this._enabledFilters.push(filters[i]);\n                }\n            }\n        }\n\n        const flush = (filters && this._enabledFilters?.length)\n            || (mask && (!mask.isMaskData\n                || (mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE))));\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.push(this, this._enabledFilters);\n        }\n\n        if (mask)\n        {\n            renderer.mask.push(this, this._mask);\n        }\n\n        if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (mask)\n        {\n            renderer.mask.pop(this);\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.pop();\n        }\n    }\n\n    /**\n     * To be overridden by the subclasses.\n     * @param _renderer - The renderer\n     */\n    protected _render(_renderer: Renderer): void // eslint-disable-line no-unused-vars\n    {\n        // this is where content itself gets rendered...\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy();\n\n        this.sortDirty = false;\n\n        const destroyChildren = typeof options === 'boolean' ? options : options?.children;\n\n        const oldChildren = this.removeChildren(0, this.children.length);\n\n        if (destroyChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n    }\n\n    /** The width of the Container, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this.scale.x * this.getLocalBounds().width;\n    }\n\n    set width(value: number)\n    {\n        const width = this.getLocalBounds().width;\n\n        if (width !== 0)\n        {\n            this.scale.x = value / width;\n        }\n        else\n        {\n            this.scale.x = 1;\n        }\n\n        this._width = value;\n    }\n\n    /** The height of the Container, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this.scale.y * this.getLocalBounds().height;\n    }\n\n    set height(value: number)\n    {\n        const height = this.getLocalBounds().height;\n\n        if (height !== 0)\n        {\n            this.scale.y = value / height;\n        }\n        else\n        {\n            this.scale.y = 1;\n        }\n\n        this._height = value;\n    }\n}\n\n/**\n * Container default updateTransform, does update children of container.\n * Will crash if there's no parent element.\n * @memberof PIXI.Container#\n * @method containerUpdateTransform\n */\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n"],"names":["DisplayObject","settings","utils","MASK_TYPES"],"mappings":"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"}