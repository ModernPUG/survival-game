{"version":3,"file":"AlphaFilter.js","sources":["../src/AlphaFilter.ts"],"sourcesContent":["import { Filter, defaultVertex } from '@pixi/core';\nimport fragment from './alpha.frag';\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n * @memberof PIXI.filters\n */\nexport class AlphaFilter extends Filter\n{\n    /**\n     * @param alpha - Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(defaultVertex, fragment, { uAlpha: 1 });\n\n        this.alpha = alpha;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n"],"names":["Filter","alpha","defaultVertex","fragment"],"mappings":";;;;;;;AAiBO,MAAM,oBAAoBA,WACjC,CAAA;AAAA,EAII,WAAA,CAAYC,UAAQ,CACpB,EAAA;AACI,IAAA,KAAA,CAAMC,kBAAe,EAAAC,gBAAA,EAAU,EAAE,MAAA,EAAQ,GAAG,CAAA,CAAA;AAE5C,IAAA,IAAA,CAAK,KAAQ,GAAAF,OAAA,CAAA;AAAA,GACjB;AAAA,EAMA,IAAI,KACJ,GAAA;AACI,IAAA,OAAO,KAAK,QAAS,CAAA,MAAA,CAAA;AAAA,GACzB;AAAA,EAEA,IAAI,MAAM,KACV,EAAA;AACI,IAAA,IAAA,CAAK,SAAS,MAAS,GAAA,KAAA,CAAA;AAAA,GAC3B;AACJ;;;;"}