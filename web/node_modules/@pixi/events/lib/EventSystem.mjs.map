{"version":3,"file":"EventSystem.mjs","sources":["../src/EventSystem.ts"],"sourcesContent":["import { EventBoundary } from './EventBoundary';\nimport type { FederatedMouseEvent } from './FederatedMouseEvent';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\nimport { extensions, ExtensionType } from '@pixi/core';\n\nimport type { IRenderableObject, ExtensionMetadata, IPointData } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\nimport type { ICanvas } from '@pixi/settings';\n\nconst MOUSE_POINTER_ID = 1;\nconst TOUCH_TO_POINTER: Record<string, string> = {\n    touchstart: 'pointerdown',\n    touchend: 'pointerup',\n    touchendoutside: 'pointerupoutside',\n    touchmove: 'pointermove',\n    touchcancel: 'pointercancel',\n};\n\ninterface Renderer\n{\n    lastObjectRendered: IRenderableObject;\n    view: ICanvas;\n    resolution: number;\n    plugins: Record<string, any>;\n}\n\n/**\n * The system for handling UI events.\n * @memberof PIXI\n */\nexport class EventSystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'events',\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n    };\n\n    /**\n     * The {@link PIXI.EventBoundary} for the stage.\n     *\n     * The {@link PIXI.EventBoundary#rootTarget rootTarget} of this root boundary is automatically set to\n     * the last rendered object before any event processing is initiated. This means the main scene\n     * needs to be rendered atleast once before UI events will start propagating.\n     *\n     * The root boundary should only be changed during initialization. Otherwise, any state held by the\n     * event boundary may be lost (like hovered & pressed DisplayObjects).\n     */\n    public readonly rootBoundary: EventBoundary;\n\n    /** Does the device support touch events https://www.w3.org/TR/touch-events/ */\n    public readonly supportsTouchEvents = 'ontouchstart' in globalThis;\n\n    /** Does the device support pointer events https://www.w3.org/Submission/pointer-events/ */\n    public readonly supportsPointerEvents = !!globalThis.PointerEvent;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     * @default true\n     */\n    public autoPreventDefault: boolean;\n\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for {@code domElement},\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     */\n    public cursorStyles: Record<string, string | ((mode: string) => void) | CSSStyleDeclaration>;\n\n    /**\n     * The DOM element to which the root event listeners are bound. This is automatically set to\n     * the renderer's {@link PIXI.Renderer#view view}.\n     */\n    public domElement: HTMLElement = null;\n\n    /** The resolution used to convert between the DOM client space into world space. */\n    public resolution = 1;\n\n    /** The renderer managing this {@link EventSystem}. */\n    public renderer: Renderer;\n\n    private currentCursor: string;\n    private rootPointerEvent: FederatedPointerEvent;\n    private rootWheelEvent: FederatedWheelEvent;\n    private eventsAdded: boolean;\n\n    /**\n     * @param {PIXI.Renderer} renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.rootBoundary = new EventBoundary(null);\n\n        this.autoPreventDefault = true;\n        this.eventsAdded = false;\n\n        this.rootPointerEvent = new FederatedPointerEvent(null);\n        this.rootWheelEvent = new FederatedWheelEvent(null);\n\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.onPointerOverOut = this.onPointerOverOut.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n    }\n\n    /**\n     * Runner init called, view is available at this point.\n     * @ignore\n     */\n    init(): void\n    {\n        const { view, resolution } = this.renderer;\n\n        this.setTargetElement(view as HTMLCanvasElement);\n        this.resolution = resolution;\n    }\n\n    /** Destroys all event listeners and detaches the renderer. */\n    destroy(): void\n    {\n        this.setTargetElement(null);\n        this.renderer = null;\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     * @param mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursor(mode: string): void\n    {\n        mode = mode || 'default';\n        let applyStyles = true;\n\n        // offscreen canvas does not support setting styles, but cursor modes can be functions,\n        // in order to handle pixi rendered cursors, so we can't bail\n        if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas)\n        {\n            applyStyles = false;\n        }\n        // if the mode didn't actually change, bail early\n        if (this.currentCursor === mode)\n        {\n            return;\n        }\n        this.currentCursor = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    if (applyStyles)\n                    {\n                        this.domElement.style.cursor = style;\n                    }\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    if (applyStyles)\n                    {\n                        Object.assign(this.domElement.style, style);\n                    }\n                    break;\n            }\n        }\n        else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.domElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * Event handler for pointer down events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerDown(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(nativeEvent);\n\n        /*\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = nativeEvent.cancelable || !('cancelable' in nativeEvent);\n\n            if (cancelable)\n            {\n                nativeEvent.preventDefault();\n            }\n        }\n\n        for (let i = 0, j = events.length; i < j; i++)\n        {\n            const nativeEvent = events[i];\n            const federatedEvent = this.bootstrapEvent(this.rootPointerEvent, nativeEvent);\n\n            this.rootBoundary.mapEvent(federatedEvent);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer move events on on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch events.\n     */\n    private onPointerMove(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer up events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerUp(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        let target = nativeEvent.target;\n\n        // if in shadow DOM use composedPath to access target\n        if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0)\n        {\n            target = nativeEvent.composedPath()[0];\n        }\n\n        const outside = target !== this.domElement ? 'outside' : '';\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            event.type += outside;\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer over & out events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerOverOut(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Passive handler for `wheel` events on {@link EventSystem.domElement this.domElement}.\n     * @param nativeEvent - The native wheel event.\n     */\n    protected onWheel(nativeEvent: WheelEvent): void\n    {\n        const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        this.rootBoundary.mapEvent(wheelEvent);\n    }\n\n    /**\n     * Sets the {@link PIXI.EventSystem#domElement domElement} and binds event listeners.\n     *\n     * To deregister the current DOM element without setting a new one, pass {@code null}.\n     * @param element - The new DOM element.\n     */\n    public setTargetElement(element: HTMLElement): void\n    {\n        this.removeEvents();\n        this.domElement = element;\n        this.addEvents();\n    }\n\n    /** Register event listeners on {@link PIXI.Renderer#domElement this.domElement}. */\n    private addEvents(): void\n    {\n        if (this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if (style)\n        {\n            if ((globalThis.navigator as any).msPointerEnabled)\n            {\n                style.msContentZooming = 'none';\n                style.msTouchAction = 'none';\n            }\n            else if (this.supportsPointerEvents)\n            {\n                style.touchAction = 'none';\n            }\n        }\n\n        /*\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.domElement.addEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.addEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.addEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.addEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.addEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.addEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        // Always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.domElement.addEventListener('touchstart', this.onPointerDown, true);\n            // this.domElement.addEventListener('touchcancel', this.onPointerCancel, true);\n            this.domElement.addEventListener('touchend', this.onPointerUp, true);\n            this.domElement.addEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.domElement.addEventListener('wheel', this.onWheel, {\n            passive: true,\n            capture: true,\n        });\n\n        this.eventsAdded = true;\n    }\n\n    /** Unregister event listeners on {@link PIXI.EventSystem#domElement this.domElement}. */\n    private removeEvents(): void\n    {\n        if (!this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if ((globalThis.navigator as any).msPointerEnabled)\n        {\n            style.msContentZooming = '';\n            style.msTouchAction = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.domElement.removeEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.removeEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.removeEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.removeEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.domElement.removeEventListener('touchstart', this.onPointerDown, true);\n            // this.domElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n            this.domElement.removeEventListener('touchend', this.onPointerUp, true);\n            this.domElement.removeEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.domElement.removeEventListener('wheel', this.onWheel, true);\n\n        this.domElement = null;\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     * @param  {PIXI.IPointData} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: IPointData, x: number, y: number): void\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.domElement.parentElement)\n        {\n            rect = {\n                x: 0,\n                y: 0,\n                width: (this.domElement as any).width,\n                height: (this.domElement as any).height,\n                left: 0,\n                top: 0\n            };\n        }\n        else\n        {\n            rect = this.domElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.domElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.domElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     * @param event - The original event data from a touch or mouse event\n     * @returns An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private normalizeToPointerData(event: TouchEvent | MouseEvent | PointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = 1;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n                touch.type = event.type;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (!globalThis.MouseEvent\n            || (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /**\n     * Normalizes the native {@link https://w3c.github.io/uievents/#interface-wheelevent WheelEvent}.\n     *\n     * The returned {@link PIXI.FederatedWheelEvent} is a shared instance. It will not persist across\n     * multiple native wheel events.\n     * @param nativeEvent - The native wheel event that occurred on the canvas.\n     * @returns A federated wheel event.\n     */\n    protected normalizeWheelEvent(nativeEvent: WheelEvent): FederatedWheelEvent\n    {\n        const event = this.rootWheelEvent;\n\n        this.transferMouseData(event, nativeEvent);\n\n        event.deltaMode = nativeEvent.deltaMode;\n        event.deltaX = nativeEvent.deltaX;\n        event.deltaY = nativeEvent.deltaY;\n        event.deltaZ = nativeEvent.deltaZ;\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);\n        event.offset.copyFrom(event.screen);\n\n        event.nativeEvent = nativeEvent;\n        event.type = nativeEvent.type;\n\n        return event;\n    }\n\n    /**\n     * Normalizes the {@code nativeEvent} into a federateed {@code FederatedPointerEvent}.\n     * @param event\n     * @param nativeEvent\n     */\n    private bootstrapEvent(event: FederatedPointerEvent, nativeEvent: PointerEvent): FederatedPointerEvent\n    {\n        event.originalEvent = null;\n        event.nativeEvent = nativeEvent;\n\n        event.pointerId = nativeEvent.pointerId;\n        event.width = nativeEvent.width;\n        event.height = nativeEvent.height;\n        event.isPrimary = nativeEvent.isPrimary;\n        event.pointerType = nativeEvent.pointerType;\n        event.pressure = nativeEvent.pressure;\n        event.tangentialPressure = nativeEvent.tangentialPressure;\n        event.tiltX = nativeEvent.tiltX;\n        event.tiltY = nativeEvent.tiltY;\n        event.twist = nativeEvent.twist;\n        this.transferMouseData(event, nativeEvent);\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);// global = screen for top-level\n        event.offset.copyFrom(event.screen);// EventBoundary recalculates using its rootTarget\n\n        event.isTrusted = nativeEvent.isTrusted;\n        if (event.type === 'pointerleave')\n        {\n            event.type = 'pointerout';\n        }\n        if (event.type.startsWith('mouse'))\n        {\n            event.type = event.type.replace('mouse', 'pointer');\n        }\n        if (event.type.startsWith('touch'))\n        {\n            event.type = TOUCH_TO_POINTER[event.type] || event.type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Transfers base & mouse event data from the {@code nativeEvent} to the federated event.\n     * @param event\n     * @param nativeEvent\n     */\n    private transferMouseData(event: FederatedMouseEvent, nativeEvent: MouseEvent): void\n    {\n        event.isTrusted = nativeEvent.isTrusted;\n        event.srcElement = nativeEvent.srcElement;\n        event.timeStamp = performance.now();\n        event.type = nativeEvent.type;\n\n        event.altKey = nativeEvent.altKey;\n        event.button = nativeEvent.button;\n        event.buttons = nativeEvent.buttons;\n        event.client.x = nativeEvent.clientX;\n        event.client.y = nativeEvent.clientY;\n        event.ctrlKey = nativeEvent.ctrlKey;\n        event.metaKey = nativeEvent.metaKey;\n        event.movement.x = nativeEvent.movementX;\n        event.movement.y = nativeEvent.movementY;\n        event.page.x = nativeEvent.pageX;\n        event.page.y = nativeEvent.pageY;\n        event.relatedTarget = null;\n        event.shiftKey = nativeEvent.shiftKey;\n    }\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n    type: string;\n}\n\ninterface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n    type: string;\n}\n\nextensions.add(EventSystem);\n"],"names":[],"mappings":"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"}