{"version":3,"file":"Transform.mjs","sources":["../src/Transform.ts"],"sourcesContent":["import { ObservablePoint } from './ObservablePoint';\nimport { Matrix } from './Matrix';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Transform extends GlobalMixins.Transform {}\n\n/**\n * Transform that takes care about its versions.\n * @memberof PIXI\n */\nexport class Transform\n{\n    /** A default (identity) transform. */\n    public static readonly IDENTITY = new Transform();\n\n    /** The world transformation matrix. */\n    public worldTransform: Matrix;\n\n    /** The local transformation matrix. */\n    public localTransform: Matrix;\n\n    /** The coordinate of the object relative to the local coordinates of the parent. */\n    public position: ObservablePoint;\n\n    /** The scale factor of the object. */\n    public scale: ObservablePoint;\n\n    /** The pivot point of the displayObject that it rotates around. */\n    public pivot: ObservablePoint;\n\n    /** The skew amount, on the x and y axis. */\n    public skew: ObservablePoint;\n\n    /** The locally unique ID of the parent's world transform used to calculate the current world transformation matrix. */\n    public _parentID: number;\n\n    /** The locally unique ID of the world transform. */\n    _worldID: number;\n\n    /** The rotation amount. */\n    protected _rotation: number;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _cx: number;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _sx: number;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _cy: number;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _sy: number;\n\n    /** The locally unique ID of the local transform. */\n    protected _localID: number;\n\n    /** The locally unique ID of the local transform used to calculate the current local transformation matrix. */\n    protected _currentLocalID: number;\n\n    constructor()\n    {\n        this.worldTransform = new Matrix();\n        this.localTransform = new Matrix();\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n        this._cx = 1;\n        this._sx = 0;\n        this._cy = 0;\n        this._sy = 1;\n        this._localID = 0;\n        this._currentLocalID = 0;\n\n        this._worldID = 0;\n        this._parentID = 0;\n    }\n\n    /** Called when a value changes. */\n    protected onChange(): void\n    {\n        this._localID++;\n    }\n\n    /** Called when the skew or the rotation changes. */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Transform `\n            + `position=(${this.position.x}, ${this.position.y}) `\n            + `rotation=${this.rotation} `\n            + `scale=(${this.scale.x}, ${this.scale.y}) `\n            + `skew=(${this.skew.x}, ${this.skew.y}) `\n            + `]`;\n    }\n    // #endif\n\n    /** Updates the local transformation matrix. */\n    updateLocalTransform(): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the local and the world transformation matrices.\n     * @param parentTransform - The parent transform\n     */\n    updateTransform(parentTransform: Transform): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     * @param matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /** The rotation of the object in radians. */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n"],"names":[],"mappings":"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"}