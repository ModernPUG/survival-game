{"version":3,"file":"Sprite.js","sources":["../src/Sprite.ts"],"sourcesContent":["import { BLEND_MODES, ObservablePoint, Point, Rectangle, Texture, settings, utils } from '@pixi/core';\nimport { Bounds, Container } from '@pixi/display';\n\nimport type { IPointData, IBaseTextureOptions, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nexport type SpriteSource = TextureSource | Texture;\n\nexport interface Sprite extends GlobalMixins.Sprite, Container {}\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * import { Sprite } from 'pixi.js';\n *\n * const sprite = Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * import { Assets, Sprite } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * const sprite = new Sprite(sheet.textures['image.png']);\n * ```\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n    public indices: Uint16Array;\n\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    /**\n     * The width of the sprite (this is initially set by the texture).\n     * @protected\n     */\n    _width: number;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     * @protected\n     */\n    _height: number;\n\n    /**\n     * The texture that the sprite is using.\n     * @private\n     */\n    _texture: Texture;\n    _textureID: number;\n\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     * Value is used for 2d CanvasRenderer.\n     * @protected\n     * @default 0xFFFFFF\n     */\n    _cachedTint: number;\n    protected _textureTrimmedID: number;\n\n    /**\n     * This is used to store the uvs data of the sprite, assigned at the same time\n     * as the vertexData in calculateVertices().\n     * @member {Float32Array}\n     */\n    protected uvs: Float32Array;\n\n    /**\n     * The anchor point defines the normalized coordinates\n     * in the texture that map to the position of this\n     * sprite.\n     *\n     * By default, this is `(0,0)` (or `texture.defaultAnchor`\n     * if you have modified that), which means the position\n     * `(x,y)` of this `Sprite` will be the top-left corner.\n     *\n     * Note: Updating `texture.defaultAnchor` after\n     * constructing a `Sprite` does _not_ update its anchor.\n     *\n     * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n     * @default `this.texture.defaultAnchor`\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * This is used to store the vertex data of the sprite (basically a quad).\n     * @member {Float32Array}\n     */\n    protected vertexData: Float32Array;\n\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite.\n     * @member {Float32Array}\n     */\n    private vertexTrimmedData: Float32Array;\n\n    /**\n     * Internal roundPixels field\n     * @private\n     */\n    private _roundPixels: boolean;\n    private _transformID: number;\n    private _transformTrimmedID: number;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    // Internal-only properties\n    /**\n     * The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.\n     * @private\n     * @default 16777215\n     */\n    _tintRGB: number;\n\n    /** @param texture - The texture for this sprite. */\n    constructor(texture?: Texture)\n    {\n        super();\n\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        this._texture = null;\n\n        this._width = 0;\n        this._height = 0;\n        this._tint = null;\n        this._tintRGB = null;\n\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n        this.vertexData = new Float32Array(8);\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n\n        this.pluginName = 'batch';\n\n        /**\n         * Used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /** When the texture is updated, this event will fire to update the scale and frame. */\n    protected _onTextureUpdate(): void\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = utils.sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = utils.sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /** Called when the anchor position updates. */\n    private _onAnchorUpdate(): void\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /** Calculates worldTransform * vertices, store it in vertexData. */\n    public calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n            }\n        }\n    }\n\n    /**\n     * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n     *\n     * This is used to ensure that the true width and height of a trimmed texture is respected.\n     */\n    public calculateTrimmedVertices(): void\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     *\n     * Renders the object using the WebGL renderer\n     * @param renderer - The webgl renderer to use.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the sprite. */\n    protected _calculateBounds(): void\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            if (!this._localBounds)\n            {\n                this._localBounds = new Bounds();\n            }\n\n            this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._localBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     * @param point - the point to test\n     * @returns The result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options?.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|PIXI.Texture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n     *     - Source to create texture from\n     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns The newly created sprite\n     */\n    static from(source: SpriteSource, options?: IBaseTextureOptions): Sprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     *\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     *\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(Texture.WHITE);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: ObservablePoint)\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /** The texture that the sprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"],"names":["Point","Container","ObservablePoint","BLEND_MODES","Texture","settings","utils","Bounds","Rectangle"],"mappings":"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"}