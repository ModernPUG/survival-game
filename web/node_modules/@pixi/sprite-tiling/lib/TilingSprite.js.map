{"version":3,"file":"TilingSprite.js","sources":["../src/TilingSprite.ts"],"sourcesContent":["import { Point, Rectangle, Transform, Texture, TextureMatrix } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport type { IPoint, IPointData, ISize, ObservablePoint, Renderer, IBaseTextureOptions, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TilingSprite extends GlobalMixins.TilingSprite {}\n\n/**\n * A tiling sprite is a fast way of rendering a tiling image.\n * @memberof PIXI\n */\nexport class TilingSprite extends Sprite\n{\n    /** Tile transform */\n    public tileTransform: Transform;\n\n    /** Matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space. */\n    public uvMatrix: TextureMatrix;\n\n    /**\n     * Flags whether the tiling pattern should originate from the origin instead of the top-left corner in\n     * local space.\n     *\n     * This will make the texture coordinates assigned to each vertex dependent on the value of the anchor. Without\n     * this, the top-left corner always gets the (0, 0) texture coordinate.\n     * @default false\n     */\n    public uvRespectAnchor: boolean;\n\n    /**\n     * Note: The wrap mode of the texture is forced to REPEAT on render if the size of the texture\n     * is a power of two, the texture's wrap mode is CLAMP, and the texture hasn't been bound yet.\n     * @param texture - The texture of the tiling sprite.\n     * @param width - The width of the tiling sprite.\n     * @param height - The height of the tiling sprite.\n     */\n    constructor(texture: Texture, width = 100, height = 100)\n    {\n        super(texture);\n\n        this.tileTransform = new Transform();\n\n        // The width of the tiling sprite\n        this._width = width;\n\n        // The height of the tiling sprite\n        this._height = height;\n\n        this.uvMatrix = this.texture.uvMatrix || new TextureMatrix(texture);\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' method.\n         * @default 'tilingSprite'\n         */\n        this.pluginName = 'tilingSprite';\n\n        this.uvRespectAnchor = false;\n    }\n    /**\n     * Changes frame clamping in corresponding textureTransform, shortcut\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     * @member {number}\n     */\n    get clampMargin(): number\n    {\n        return this.uvMatrix.clampMargin;\n    }\n\n    set clampMargin(value: number)\n    {\n        this.uvMatrix.clampMargin = value;\n        this.uvMatrix.update(true);\n    }\n\n    /** The scaling of the image that is being tiled. */\n    get tileScale(): ObservablePoint\n    {\n        return this.tileTransform.scale;\n    }\n\n    set tileScale(value: IPointData)\n    {\n        this.tileTransform.scale.copyFrom(value as IPoint);\n    }\n\n    /** The offset of the image that is being tiled. */\n    get tilePosition(): ObservablePoint\n    {\n        return this.tileTransform.position;\n    }\n\n    set tilePosition(value: ObservablePoint)\n    {\n        this.tileTransform.position.copyFrom(value as IPoint);\n    }\n\n    /**\n     * @protected\n     */\n    protected _onTextureUpdate(): void\n    {\n        if (this.uvMatrix)\n        {\n            this.uvMatrix.texture = this._texture;\n        }\n        this._cachedTint = 0xFFFFFF;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // tweak our texture temporarily..\n        const texture = this._texture;\n\n        if (!texture || !texture.valid)\n        {\n            return;\n        }\n\n        this.tileTransform.updateLocalTransform();\n        this.uvMatrix.update();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the tiling sprite. */\n    protected _calculateBounds(): void\n    {\n        const minX = this._width * -this._anchor._x;\n        const minY = this._height * -this._anchor._y;\n        const maxX = this._width * (1 - this._anchor._x);\n        const maxY = this._height * (1 - this._anchor._y);\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._width * -this._anchor._x;\n            this._bounds.minY = this._height * -this._anchor._y;\n            this._bounds.maxX = this._width * (1 - this._anchor._x);\n            this._bounds.maxY = this._height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Checks if a point is inside this tiling sprite.\n     * @param point - The point to check.\n     * @returns Whether or not the sprite contains the point.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._width;\n        const height = this._height;\n        const x1 = -width * this.anchor._x;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            const y1 = -height * this.anchor._y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this.tileTransform = null;\n        this.uvMatrix = null;\n    }\n\n    /**\n     * Helper function that creates a new tiling sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {number} options.width - required width of the tiling sprite\n     * @param {number} options.height - required height of the tiling sprite\n     * @returns {PIXI.TilingSprite} The newly created texture\n     */\n    static from(source: TextureSource | Texture, options: ISize & IBaseTextureOptions): TilingSprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new TilingSprite(\n            texture,\n            options.width,\n            options.height\n        );\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n    }\n\n    /** The height of the TilingSprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n    }\n}\n"],"names":["Point","Sprite","Transform","TextureMatrix","Rectangle","Texture"],"mappings":"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"}