{"version":3,"file":"StateSystem.mjs","sources":["../../src/state/StateSystem.ts"],"sourcesContent":["import { mapWebGLBlendModesToPixi } from './utils/mapWebGLBlendModesToPixi';\nimport { State } from './State';\nimport { BLEND_MODES } from '@pixi/constants';\n\nimport type { ISystem } from '../system/ISystem';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines.\n * @memberof PIXI\n */\nexport class StateSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'state',\n    };\n\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default PIXI.BLEND_MODES.NONE\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: IRenderingContext;\n\n    protected blendModes: number[][];\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: Array<(value: boolean) => void>;\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: Array<(system: this, state: State) => void>;\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = BLEND_MODES.NONE;\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = new State();\n        this.defaultState.blend = true;\n    }\n\n    contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModes = mapWebGLBlendModesToPixi(gl);\n\n        this.set(this.defaultState);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    setBlend(value: boolean): void\n    {\n        this.updateCheck(StateSystem.checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    setOffset(value: boolean): void\n    {\n        this.updateCheck(StateSystem.checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    setBlendMode(value: number): void\n    {\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModes[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        this.blendMode = -1;\n        this.setBlendMode(0);\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static checkBlendMode(system: StateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static checkPolygonOffset(system: StateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.gl = null;\n    }\n}\n\nextensions.add(StateSystem);\n"],"names":[],"mappings":"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"}