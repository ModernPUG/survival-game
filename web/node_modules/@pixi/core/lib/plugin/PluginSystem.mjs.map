{"version":3,"file":"PluginSystem.mjs","sources":["../../src/plugin/PluginSystem.ts"],"sourcesContent":["import { deprecation } from '@pixi/utils';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport type { IRenderer } from '../IRenderer';\nimport type { ISystem } from '../system/ISystem';\n\nexport interface IRendererPlugins extends GlobalMixins.IRendererPlugins\n{\n    [key: string]: any;\n}\n\n/**\n * Manages the functionality that allows users to extend pixi functionality via additional plugins.\n * @memberof PIXI\n */\nexport class PluginSystem implements ISystem<IRendererPlugins>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: '_plugin',\n    };\n\n    /**\n     * Collection of plugins.\n     * @readonly\n     * @member {object}\n     */\n    public readonly plugins: IRendererPlugins;\n    private renderer: IRenderer;\n\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n\n        /**\n         * Collection of plugins.\n         * @readonly\n         * @member {object}\n         */\n        this.plugins = {};\n\n        // #if _DEBUG\n        Object.defineProperties(this.plugins, {\n            extract: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.extract has moved to renderer.extract');\n\n                    return (renderer as any).extract;\n                },\n            },\n            prepare: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.prepare has moved to renderer.prepare');\n\n                    return (renderer as any).prepare;\n                },\n            },\n            interaction: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.interaction has been deprecated, use renderer.events');\n\n                    return (renderer as any).events;\n                },\n            },\n        });\n        // #endif\n    }\n\n    /**\n     * Initialize the plugins.\n     * @protected\n     * @param {object} staticMap - The dictionary of statically saved plugins.\n     */\n    init(staticMap: IRendererPlugins): void\n    {\n        for (const o in staticMap)\n        {\n            this.plugins[o] = new (staticMap[o])(this.renderer);\n        }\n    }\n\n    destroy(): void\n    {\n        for (const o in this.plugins)\n        {\n            this.plugins[o].destroy();\n            this.plugins[o] = null;\n        }\n    }\n}\n\nextensions.add(PluginSystem);\n"],"names":[],"mappings":";;AAeO,MAAM,YACb,CAAA;AAAA,EAkBI,YAAY,QACZ,EAAA;AACI,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAOhB,IAAA,IAAA,CAAK,UAAU,EAAC,CAAA;AAAA,GAiCpB;AAAA,EAOA,KAAK,SACL,EAAA;AACI,IAAA,KAAA,MAAW,KAAK,SAChB,EAAA;AACI,MAAA,IAAA,CAAK,QAAQ,CAAK,CAAA,GAAA,IAAK,SAAU,CAAA,CAAA,CAAA,CAAI,KAAK,QAAQ,CAAA,CAAA;AAAA,KACtD;AAAA,GACJ;AAAA,EAEA,OACA,GAAA;AACI,IAAW,KAAA,MAAA,CAAA,IAAK,KAAK,OACrB,EAAA;AACI,MAAK,IAAA,CAAA,OAAA,CAAQ,GAAG,OAAQ,EAAA,CAAA;AACxB,MAAA,IAAA,CAAK,QAAQ,CAAK,CAAA,GAAA,IAAA,CAAA;AAAA,KACtB;AAAA,GACJ;AACJ,CAAA;AApFa,aAGF,SAA+B,GAAA;AAAA,EAClC,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,cAAA;AAAA,IACd,aAAc,CAAA,oBAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,SAAA;AACV,CAAA,CAAA;AA6EJ,UAAA,CAAW,IAAI,YAAY,CAAA;;;;"}