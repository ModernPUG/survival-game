import './utils/index.mjs';
import { ProgramCache } from '@pixi/utils';
import defaultFragment from './defaultProgram.mjs';
import defaultVertex from './defaultProgram2.mjs';
import { settings } from '@pixi/settings';
import { PRECISION } from '@pixi/constants';
import { setPrecision } from './utils/setPrecision.mjs';
import { getMaxFragmentPrecision } from './utils/getMaxFragmentPrecision.mjs';

let UID = 0;
const nameCache = {};
class Program {
  constructor(vertexSrc, fragmentSrc, name = "pixi-shader", extra = {}) {
    this.extra = {};
    this.id = UID++;
    this.vertexSrc = vertexSrc || Program.defaultVertexSrc;
    this.fragmentSrc = fragmentSrc || Program.defaultFragmentSrc;
    this.vertexSrc = this.vertexSrc.trim();
    this.fragmentSrc = this.fragmentSrc.trim();
    this.extra = extra;
    if (this.vertexSrc.substring(0, 8) !== "#version") {
      name = name.replace(/\s+/g, "-");
      if (nameCache[name]) {
        nameCache[name]++;
        name += `-${nameCache[name]}`;
      } else {
        nameCache[name] = 1;
      }
      this.vertexSrc = `#define SHADER_NAME ${name}
${this.vertexSrc}`;
      this.fragmentSrc = `#define SHADER_NAME ${name}
${this.fragmentSrc}`;
      this.vertexSrc = setPrecision(this.vertexSrc, settings.PRECISION_VERTEX, PRECISION.HIGH);
      this.fragmentSrc = setPrecision(this.fragmentSrc, settings.PRECISION_FRAGMENT, getMaxFragmentPrecision());
    }
    this.glPrograms = {};
    this.syncUniforms = null;
  }
  static get defaultVertexSrc() {
    return defaultVertex;
  }
  static get defaultFragmentSrc() {
    return defaultFragment;
  }
  static from(vertexSrc, fragmentSrc, name) {
    const key = vertexSrc + fragmentSrc;
    let program = ProgramCache[key];
    if (!program) {
      ProgramCache[key] = program = new Program(vertexSrc, fragmentSrc, name);
    }
    return program;
  }
}

export { Program };
//# sourceMappingURL=Program.mjs.map
