{"version":3,"file":"TextureGCSystem.mjs","sources":["../../src/textures/TextureGCSystem.ts"],"sourcesContent":["import { GC_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\nimport type { ISystem } from '../system/ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { Texture } from './Texture';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nexport interface IUnloadableTexture\n{\n    _texture: Texture | RenderTexture;\n    children: IUnloadableTexture[];\n}\n\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof PIXI\n */\nexport class TextureGCSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'textureGC',\n    };\n\n    /**\n     * Count\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Check count\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle time, in seconds\n     * @see PIXI.settings.GC_MAX_IDLE\n     */\n    public maxIdle: number;\n\n    /**\n     * Maximum number of item to check\n     * @see PIXI.settings.GC_MAX_CHECK_COUNT\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode\n     * @see PIXI.settings.GC_MODE\n     */\n    public mode: GC_MODES;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n        this.maxIdle = settings.GC_MAX_IDLE;\n        this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n        this.mode = settings.GC_MODE;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    protected postrender(): void\n    {\n        if (!this.renderer.objectRenderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (this.mode === GC_MODES.MANUAL)\n        {\n            return;\n        }\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    run(): void\n    {\n        const tm = this.renderer.texture;\n        const managedTextures =  tm.managedTextures;\n        let wasRemoved = false;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // only supports non generated textures at the moment!\n            if (!(texture as any).framebuffer && this.count - texture.touched > this.maxIdle)\n            {\n                tm.destroyTexture(texture, true);\n                managedTextures[i] = null;\n                wasRemoved = true;\n            }\n        }\n\n        if (wasRemoved)\n        {\n            let j = 0;\n\n            for (let i = 0; i < managedTextures.length; i++)\n            {\n                if (managedTextures[i] !== null)\n                {\n                    managedTextures[j++] = managedTextures[i];\n                }\n            }\n\n            managedTextures.length = j;\n        }\n    }\n\n    /**\n     * Removes all the textures within the specified displayObject and its children from the GPU\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n     */\n    unload(displayObject: IUnloadableTexture): void\n    {\n        const tm = this.renderer.texture;\n        const texture = displayObject._texture as RenderTexture;\n\n        // only destroy non generated textures\n        if (texture && !texture.framebuffer)\n        {\n            tm.destroyTexture(texture);\n        }\n\n        for (let i = displayObject.children.length - 1; i >= 0; i--)\n        {\n            this.unload(displayObject.children[i]);\n        }\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(TextureGCSystem);\n"],"names":[],"mappings":";;;;AAqBO,MAAM,eACb,CAAA;AAAA,EAuCI,YAAY,QACZ,EAAA;AACI,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAEhB,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAA,CAAA;AACb,IAAA,IAAA,CAAK,UAAa,GAAA,CAAA,CAAA;AAClB,IAAA,IAAA,CAAK,UAAU,QAAS,CAAA,WAAA,CAAA;AACxB,IAAA,IAAA,CAAK,gBAAgB,QAAS,CAAA,kBAAA,CAAA;AAC9B,IAAA,IAAA,CAAK,OAAO,QAAS,CAAA,OAAA,CAAA;AAAA,GACzB;AAAA,EAMA,UACA,GAAA;AACI,IAAA,IAAI,CAAC,IAAA,CAAK,QAAS,CAAA,cAAA,CAAe,iBAClC,EAAA;AACI,MAAA,OAAA;AAAA,KACJ;AAEA,IAAK,IAAA,CAAA,KAAA,EAAA,CAAA;AAEL,IAAI,IAAA,IAAA,CAAK,IAAS,KAAA,QAAA,CAAS,MAC3B,EAAA;AACI,MAAA,OAAA;AAAA,KACJ;AAEA,IAAK,IAAA,CAAA,UAAA,EAAA,CAAA;AAEL,IAAI,IAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAK,aAC3B,EAAA;AACI,MAAA,IAAA,CAAK,UAAa,GAAA,CAAA,CAAA;AAElB,MAAA,IAAA,CAAK,GAAI,EAAA,CAAA;AAAA,KACb;AAAA,GACJ;AAAA,EAMA,GACA,GAAA;AACI,IAAM,MAAA,EAAA,GAAK,KAAK,QAAS,CAAA,OAAA,CAAA;AACzB,IAAA,MAAM,kBAAmB,EAAG,CAAA,eAAA,CAAA;AAC5B,IAAA,IAAI,UAAa,GAAA,KAAA,CAAA;AAEjB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,eAAA,CAAgB,QAAQ,CAC5C,EAAA,EAAA;AACI,MAAA,MAAM,UAAU,eAAgB,CAAA,CAAA,CAAA,CAAA;AAGhC,MAAI,IAAA,CAAE,QAAgB,WAAe,IAAA,IAAA,CAAK,QAAQ,OAAQ,CAAA,OAAA,GAAU,KAAK,OACzE,EAAA;AACI,QAAG,EAAA,CAAA,cAAA,CAAe,SAAS,IAAI,CAAA,CAAA;AAC/B,QAAA,eAAA,CAAgB,CAAK,CAAA,GAAA,IAAA,CAAA;AACrB,QAAa,UAAA,GAAA,IAAA,CAAA;AAAA,OACjB;AAAA,KACJ;AAEA,IAAA,IAAI,UACJ,EAAA;AACI,MAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AAER,MAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,eAAA,CAAgB,QAAQ,CAC5C,EAAA,EAAA;AACI,QAAI,IAAA,eAAA,CAAgB,OAAO,IAC3B,EAAA;AACI,UAAA,eAAA,CAAgB,OAAO,eAAgB,CAAA,CAAA,CAAA,CAAA;AAAA,SAC3C;AAAA,OACJ;AAEA,MAAA,eAAA,CAAgB,MAAS,GAAA,CAAA,CAAA;AAAA,KAC7B;AAAA,GACJ;AAAA,EAMA,OAAO,aACP,EAAA;AACI,IAAM,MAAA,EAAA,GAAK,KAAK,QAAS,CAAA,OAAA,CAAA;AACzB,IAAA,MAAM,UAAU,aAAc,CAAA,QAAA,CAAA;AAG9B,IAAI,IAAA,OAAA,IAAW,CAAC,OAAA,CAAQ,WACxB,EAAA;AACI,MAAA,EAAA,CAAG,eAAe,OAAO,CAAA,CAAA;AAAA,KAC7B;AAEA,IAAA,KAAA,IAAS,IAAI,aAAc,CAAA,QAAA,CAAS,SAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CACxD,EAAA,EAAA;AACI,MAAK,IAAA,CAAA,MAAA,CAAO,aAAc,CAAA,QAAA,CAAS,CAAE,CAAA,CAAA,CAAA;AAAA,KACzC;AAAA,GACJ;AAAA,EAEA,OACA,GAAA;AACI,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;AAAA,GACpB;AACJ,CAAA;AA/Ia,gBAGF,SAA+B,GAAA;AAAA,EAClC,MAAM,aAAc,CAAA,cAAA;AAAA,EACpB,IAAM,EAAA,WAAA;AACV,CAAA,CAAA;AA2IJ,UAAA,CAAW,IAAI,eAAe,CAAA;;;;"}