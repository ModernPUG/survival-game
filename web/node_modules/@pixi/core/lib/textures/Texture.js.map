{"version":3,"file":"Texture.js","sources":["../../src/textures/Texture.ts"],"sourcesContent":["import { Point, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { uid, TextureCache, getResolutionOfUrl, EventEmitter } from '@pixi/utils';\nimport { ImageResource } from './resources/ImageResource';\nimport { BaseTexture } from './BaseTexture';\nimport { TextureUvs } from './TextureUvs';\n\nimport type { IPointData, ISize } from '@pixi/math';\nimport type { BufferResource } from './resources/BufferResource';\nimport type { CanvasResource } from './resources/CanvasResource';\nimport type { Resource } from './resources/Resource';\nimport type { IBaseTextureOptions, ImageSource } from './BaseTexture';\nimport type { TextureMatrix } from './TextureMatrix';\n\nconst DEFAULT_UVS = new TextureUvs();\n\nexport type TextureSource = string | BaseTexture | ImageSource;\n\nexport interface Texture extends GlobalMixins.Texture, EventEmitter {}\n\n/**\n * Used to remove listeners from WHITE and EMPTY Textures\n * @ignore\n */\nfunction removeAllHandlers(tex: any): void\n{\n    tex.destroy = function _emptyDestroy(): void { /* empty */ };\n    tex.on = function _emptyOn(): void { /* empty */ };\n    tex.once = function _emptyOnce(): void { /* empty */ };\n    tex.emit = function _emptyEmit(): void { /* empty */ };\n}\n\n/**\n * A texture stores the information that represents an image or part of an image.\n *\n * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\n * If no frame is provided for a texture, then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * import { Sprite, Texture } from 'pixi.js';\n *\n * const texture = Texture.from('assets/image.png');\n * const sprite1 = new Sprite(texture);\n * const sprite2 = new Sprite(texture);\n * ```\n *\n * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:\n * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n *\n * ```js\n * import { Sprite, Texture } from 'pixi.js';\n *\n * const texture = Texture.from('assets/image.svg');\n * const sprite1 = new Sprite(texture);\n * // sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n *\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n */\nexport class Texture<R extends Resource = Resource> extends EventEmitter\n{\n    /** The base texture that this texture uses. */\n    public baseTexture: BaseTexture<R>;\n\n    /** This is the area of original texture, before it was put in atlas. */\n    public orig: Rectangle;\n\n    /**\n     * This is the trimmed area of original texture, before it was put in atlas\n     * Please call `updateUvs()` after you change coordinates of `trim` manually.\n     */\n    public trim: Rectangle;\n\n    /** This will let the renderer know if the texture is valid. If it's not then it cannot be rendered. */\n    public valid: boolean;\n\n    /**\n     * Does this Texture have any frame data assigned to it?\n     *\n     * This mode is enabled automatically if no frame was passed inside constructor.\n     *\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n     *\n     * Beware, after loading or resize of baseTexture event can fired two times!\n     * If you want more control, subscribe on baseTexture itself.\n     *\n     * Any assignment of `frame` switches off `noFrame` mode.\n     * @example\n     * texture.on('update', () => {});\n     */\n    public noFrame: boolean;\n\n    /**\n     * Anchor point that is used as default if sprite is created with this texture.\n     * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\n     * @default {0,0}\n     */\n    public defaultAnchor: Point;\n\n    /** Default TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\n    public uvMatrix: TextureMatrix;\n    protected _rotate: number;\n\n    /**\n     * Update ID is observed by sprites and TextureMatrix instances.\n     * Call updateUvs() to increment it.\n     * @protected\n     */\n    _updateID: number;\n\n    /**\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n     */\n    _frame: Rectangle;\n\n    /**\n     * The WebGL UV data cache. Can be used as quad UV.\n     * @protected\n     */\n    _uvs: TextureUvs;\n\n    /**\n     * The ids under which this Texture has been added to the texture cache. This is\n     * automatically set as long as Texture.addToCache is used, but may not be set if a\n     * Texture is added directly to the TextureCache array.\n     */\n    textureCacheIds: Array<string>;\n\n    /**\n     * @param baseTexture - The base texture source to create the texture from\n     * @param frame - The rectangle frame of the texture to show\n     * @param orig - The area of original texture\n     * @param trim - Trimmed rectangle of original texture\n     * @param rotate - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}\n     * @param anchor - Default anchor point used for sprite placement / rotation\n     */\n    constructor(baseTexture: BaseTexture<R>, frame?: Rectangle,\n        orig?: Rectangle, trim?: Rectangle, rotate?: number, anchor?: IPointData)\n    {\n        super();\n\n        this.noFrame = false;\n\n        if (!frame)\n        {\n            this.noFrame = true;\n            frame = new Rectangle(0, 0, 1, 1);\n        }\n\n        if (baseTexture instanceof Texture)\n        {\n            baseTexture = baseTexture.baseTexture;\n        }\n\n        this.baseTexture = baseTexture;\n        this._frame = frame;\n        this.trim = trim;\n        this.valid = false;\n        this._uvs = DEFAULT_UVS;\n        this.uvMatrix = null;\n        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);\n\n        this._rotate = Number(rotate || 0);\n\n        if (rotate as any === true)\n        {\n            // this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n            this._rotate = 2;\n        }\n        else if (this._rotate % 2 !== 0)\n        {\n            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');\n        }\n\n        this.defaultAnchor = anchor ? new Point(anchor.x, anchor.y) : new Point(0, 0);\n\n        this._updateID = 0;\n\n        this.textureCacheIds = [];\n\n        if (!baseTexture.valid)\n        {\n            baseTexture.once('loaded', this.onBaseTextureUpdated, this);\n        }\n        else if (this.noFrame)\n        {\n            // if there is no frame we should monitor for any base texture changes..\n            if (baseTexture.valid)\n            {\n                this.onBaseTextureUpdated(baseTexture);\n            }\n        }\n        else\n        {\n            this.frame = frame;\n        }\n\n        if (this.noFrame)\n        {\n            baseTexture.on('update', this.onBaseTextureUpdated, this);\n        }\n    }\n\n    /**\n     * Updates this texture on the gpu.\n     *\n     * Calls the TextureResource update.\n     *\n     * If you adjusted `frame` manually, please call `updateUvs()` instead.\n     */\n    update(): void\n    {\n        if (this.baseTexture.resource)\n        {\n            this.baseTexture.resource.update();\n        }\n    }\n\n    /**\n     * Called when the base texture is updated\n     * @protected\n     * @param baseTexture - The base texture.\n     */\n    onBaseTextureUpdated(baseTexture: BaseTexture): void\n    {\n        if (this.noFrame)\n        {\n            if (!this.baseTexture.valid)\n            {\n                return;\n            }\n\n            this._frame.width = baseTexture.width;\n            this._frame.height = baseTexture.height;\n            this.valid = true;\n            this.updateUvs();\n        }\n        else\n        {\n            // TODO this code looks confusing.. boo to abusing getters and setters!\n            // if user gave us frame that has bigger size than resized texture it can be a problem\n            this.frame = this._frame;\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     * @param [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    destroy(destroyBase?: boolean): void\n    {\n        if (this.baseTexture)\n        {\n            if (destroyBase)\n            {\n                const { resource } = this.baseTexture as unknown as BaseTexture<ImageResource>;\n\n                // delete the texture if it exists in the texture cache..\n                // this only needs to be removed if the base texture is actually destroyed too..\n                if (resource?.url && TextureCache[resource.url])\n                {\n                    Texture.removeFromCache(resource.url);\n                }\n\n                this.baseTexture.destroy();\n            }\n\n            this.baseTexture.off('loaded', this.onBaseTextureUpdated, this);\n            this.baseTexture.off('update', this.onBaseTextureUpdated, this);\n\n            this.baseTexture = null;\n        }\n\n        this._frame = null;\n        this._uvs = null;\n        this.trim = null;\n        this.orig = null;\n\n        this.valid = false;\n\n        Texture.removeFromCache(this);\n        this.textureCacheIds = null;\n    }\n\n    /**\n     * Creates a new texture object that acts the same as this one.\n     * @returns - The new texture\n     */\n    clone(): Texture\n    {\n        const clonedFrame = this._frame.clone();\n        const clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone();\n        const clonedTexture = new Texture(this.baseTexture,\n            !this.noFrame && clonedFrame,\n            clonedOrig,\n            this.trim?.clone(),\n            this.rotate,\n            this.defaultAnchor\n        );\n\n        if (this.noFrame)\n        {\n            clonedTexture._frame = clonedFrame;\n        }\n\n        return clonedTexture;\n    }\n\n    /**\n     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n     * Call it after changing the frame\n     */\n    updateUvs(): void\n    {\n        if (this._uvs === DEFAULT_UVS)\n        {\n            this._uvs = new TextureUvs();\n        }\n\n        this._uvs.set(this._frame, this.baseTexture, this.rotate);\n\n        this._updateID++;\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|PIXI.BaseTexture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source -\n     *        Source or array of sources to create texture from\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @returns {PIXI.Texture} The newly created texture\n     */\n    static from<R extends Resource = Resource, RO = any>(source: TextureSource | TextureSource[],\n        options: IBaseTextureOptions<RO> = {},\n        strict = settings.STRICT_TEXTURE_CACHE): Texture<R>\n    {\n        const isFrame = typeof source === 'string';\n        let cacheId = null;\n\n        if (isFrame)\n        {\n            cacheId = source;\n        }\n        else if (source instanceof BaseTexture)\n        {\n            if (!source.cacheId)\n            {\n                const prefix = options?.pixiIdPrefix || 'pixiid';\n\n                source.cacheId = `${prefix}-${uid()}`;\n                BaseTexture.addToCache(source, source.cacheId);\n            }\n\n            cacheId = source.cacheId;\n        }\n        else\n        {\n            if (!(source as any)._pixiId)\n            {\n                const prefix = options?.pixiIdPrefix || 'pixiid';\n\n                (source as any)._pixiId = `${prefix}_${uid()}`;\n            }\n\n            cacheId = (source as any)._pixiId;\n        }\n\n        let texture = TextureCache[cacheId] as Texture<R>;\n\n        // Strict-mode rejects invalid cacheIds\n        if (isFrame && strict && !texture)\n        {\n            throw new Error(`The cacheId \"${cacheId}\" does not exist in TextureCache.`);\n        }\n\n        if (!texture && !(source instanceof BaseTexture))\n        {\n            if (!options.resolution)\n            {\n                options.resolution = getResolutionOfUrl(source as string);\n            }\n\n            texture = new Texture<R>(new BaseTexture<R>(source, options));\n            texture.baseTexture.cacheId = cacheId;\n\n            BaseTexture.addToCache(texture.baseTexture, cacheId);\n            Texture.addToCache(texture, cacheId);\n        }\n        else if (!texture && (source instanceof BaseTexture))\n        {\n            texture = new Texture<R>(source as BaseTexture<R>);\n\n            Texture.addToCache(texture, cacheId);\n        }\n\n        // lets assume its a base texture!\n        return texture;\n    }\n\n    /**\n     * Useful for loading textures via URLs. Use instead of `Texture.from` because\n     * it does a better job of handling failed URLs more effectively. This also ignores\n     * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.\n     * @param url - The remote URL or array of URLs to load.\n     * @param options - Optional options to include\n     * @returns - A Promise that resolves to a Texture.\n     */\n    static fromURL<R extends Resource = Resource, RO = any>(\n        url: string | string[], options?: IBaseTextureOptions<RO>): Promise<Texture<R>>\n    {\n        const resourceOptions = Object.assign({ autoLoad: false }, options?.resourceOptions);\n        const texture = Texture.from<R>(url, Object.assign({ resourceOptions }, options), false);\n        const resource = texture.baseTexture.resource;\n\n        // The texture was already loaded\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // Manually load the texture, this should allow users to handle load errors\n        return resource.load().then(() => Promise.resolve(texture));\n    }\n\n    /**\n     * Create a new Texture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns - The resulting new BaseTexture\n     */\n    static fromBuffer(buffer: Float32Array | Uint8Array,\n        width: number, height: number, options?: IBaseTextureOptions<ISize>): Texture<BufferResource>\n    {\n        return new Texture(BaseTexture.fromBuffer(buffer, width, height, options));\n    }\n\n    /**\n     * Create a texture from a source and add to the cache.\n     * @param {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas|string} source - The input source.\n     * @param imageUrl - File name of texture, for cache and resolving resolution.\n     * @param name - Human readable name for the texture cache. If no name is\n     *        specified, only `imageUrl` will be used as the cache ID.\n     * @param options\n     * @returns - Output texture\n     */\n    static fromLoader<R extends Resource = Resource>(source: ImageSource | string,\n        imageUrl: string, name?: string, options?: IBaseTextureOptions): Promise<Texture<R>>\n    {\n        const baseTexture = new BaseTexture<R>(source, Object.assign({\n            scaleMode: settings.SCALE_MODE,\n            resolution: getResolutionOfUrl(imageUrl),\n        }, options));\n\n        const { resource } = baseTexture;\n\n        if (resource instanceof ImageResource)\n        {\n            resource.url = imageUrl;\n        }\n\n        const texture = new Texture<R>(baseTexture);\n\n        // No name, use imageUrl instead\n        if (!name)\n        {\n            name = imageUrl;\n        }\n\n        // lets also add the frame to pixi's global cache for 'fromLoader' function\n        BaseTexture.addToCache(texture.baseTexture, name);\n        Texture.addToCache(texture, name);\n\n        // also add references by url if they are different.\n        if (name !== imageUrl)\n        {\n            BaseTexture.addToCache(texture.baseTexture, imageUrl);\n            Texture.addToCache(texture, imageUrl);\n        }\n\n        // Generally images are valid right away\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // SVG assets need to be parsed async, let's wait\n        return new Promise((resolve) =>\n        {\n            texture.baseTexture.once('loaded', () => resolve(texture));\n        });\n    }\n\n    /**\n     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     * @param texture - The Texture to add to the cache.\n     * @param id - The id that the Texture will be stored against.\n     */\n    static addToCache(texture: Texture, id: string): void\n    {\n        if (id)\n        {\n            if (!texture.textureCacheIds.includes(id))\n            {\n                texture.textureCacheIds.push(id);\n            }\n\n            if (TextureCache[id])\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`Texture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            TextureCache[id] = texture;\n        }\n    }\n\n    /**\n     * Remove a Texture from the global TextureCache.\n     * @param texture - id of a Texture to be removed, or a Texture instance itself\n     * @returns - The Texture that was removed\n     */\n    static removeFromCache(texture: string | Texture): Texture | null\n    {\n        if (typeof texture === 'string')\n        {\n            const textureFromCache = TextureCache[texture];\n\n            if (textureFromCache)\n            {\n                const index = textureFromCache.textureCacheIds.indexOf(texture);\n\n                if (index > -1)\n                {\n                    textureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete TextureCache[texture];\n\n                return textureFromCache;\n            }\n        }\n        else if (texture?.textureCacheIds)\n        {\n            for (let i = 0; i < texture.textureCacheIds.length; ++i)\n            {\n                // Check that texture matches the one being passed in before deleting it from the cache.\n                if (TextureCache[texture.textureCacheIds[i]] === texture)\n                {\n                    delete TextureCache[texture.textureCacheIds[i]];\n                }\n            }\n\n            texture.textureCacheIds.length = 0;\n\n            return texture;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns resolution of baseTexture\n     * @readonly\n     */\n    get resolution(): number\n    {\n        return this.baseTexture.resolution;\n    }\n\n    /**\n     * The frame specifies the region of the base texture that this texture uses.\n     * Please call `updateUvs()` after you change coordinates of `frame` manually.\n     */\n    get frame(): Rectangle\n    {\n        return this._frame;\n    }\n\n    set frame(frame: Rectangle)\n    {\n        this._frame = frame;\n\n        this.noFrame = false;\n\n        const { x, y, width, height } = frame;\n        const xNotFit = x + width > this.baseTexture.width;\n        const yNotFit = y + height > this.baseTexture.height;\n\n        if (xNotFit || yNotFit)\n        {\n            const relationship = xNotFit && yNotFit ? 'and' : 'or';\n            const errorX = `X: ${x} + ${width} = ${x + width} > ${this.baseTexture.width}`;\n            const errorY = `Y: ${y} + ${height} = ${y + height} > ${this.baseTexture.height}`;\n\n            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '\n                + `${errorX} ${relationship} ${errorY}`);\n        }\n\n        this.valid = width && height && this.baseTexture.valid;\n\n        if (!this.trim && !this.rotate)\n        {\n            this.orig = frame;\n        }\n\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.groupD8} for explanation\n     */\n    get rotate(): number\n    {\n        return this._rotate;\n    }\n\n    set rotate(rotate: number)\n    {\n        this._rotate = rotate;\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /** The width of the Texture in pixels. */\n    get width(): number\n    {\n        return this.orig.width;\n    }\n\n    /** The height of the Texture in pixels. */\n    get height(): number\n    {\n        return this.orig.height;\n    }\n\n    /** Utility function for BaseTexture|Texture cast. */\n    castToBaseTexture(): BaseTexture\n    {\n        return this.baseTexture;\n    }\n\n    private static _EMPTY: Texture<Resource>;\n    private static _WHITE: Texture<CanvasResource>;\n\n    /** An empty texture, used often to not have to create multiple empty textures. Can not be destroyed. */\n    public static get EMPTY(): Texture<Resource>\n    {\n        if (!Texture._EMPTY)\n        {\n            Texture._EMPTY = new Texture(new BaseTexture());\n            removeAllHandlers(Texture._EMPTY);\n            removeAllHandlers(Texture._EMPTY.baseTexture);\n        }\n\n        return Texture._EMPTY;\n    }\n\n    /** A white texture of 16x16 size, used for graphics and other things Can not be destroyed. */\n    public static get WHITE(): Texture<CanvasResource>\n    {\n        if (!Texture._WHITE)\n        {\n            const canvas = settings.ADAPTER.createCanvas(16, 16);\n            const context = canvas.getContext('2d');\n\n            canvas.width = 16;\n            canvas.height = 16;\n            context.fillStyle = 'white';\n            context.fillRect(0, 0, 16, 16);\n\n            Texture._WHITE = new Texture(BaseTexture.from(canvas));\n            removeAllHandlers(Texture._WHITE);\n            removeAllHandlers(Texture._WHITE.baseTexture);\n        }\n\n        return Texture._WHITE;\n    }\n}\n\n"],"names":["TextureUvs","EventEmitter","Rectangle","Point","TextureCache","settings","BaseTexture","uid","getResolutionOfUrl","ImageResource"],"mappings":"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"}