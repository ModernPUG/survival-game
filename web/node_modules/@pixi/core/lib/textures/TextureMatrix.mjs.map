{"version":3,"file":"TextureMatrix.mjs","sources":["../../src/textures/TextureMatrix.ts"],"sourcesContent":["import { Matrix } from '@pixi/math';\n\nimport type { Texture } from './Texture';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n * @see PIXI.Texture\n * @see PIXI.Mesh\n * @see PIXI.TilingSprite\n * @memberof PIXI\n */\nexport class TextureMatrix\n{\n    /**\n     * Matrix operation that converts texture region coords to texture coords\n     * @readonly\n     */\n    public mapCoord: Matrix;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n     * @default 0\n     */\n    public clampOffset: number;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     */\n    public clampMargin: number;\n\n    /**\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n     * Calculated based on clampOffset.\n     */\n    readonly uClampFrame: Float32Array;\n\n    /** Normalized clamp offset. Calculated based on clampOffset. */\n    readonly uClampOffset: Float32Array;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _textureID: number;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _updateID: number;\n    _texture: Texture;\n\n    /**\n     * If texture size is the same as baseTexture.\n     * @default false\n     * @readonly\n     */\n    isSimple: boolean;\n\n    /**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */\n    constructor(texture: Texture, clampMargin?: number)\n    {\n        this._texture = texture;\n\n        this.mapCoord = new Matrix();\n        this.uClampFrame = new Float32Array(4);\n        this.uClampOffset = new Float32Array(2);\n        this._textureID = -1;\n        this._updateID = 0;\n\n        this.clampOffset = 0;\n        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;\n        this.isSimple = false;\n    }\n\n    /** Texture property. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        this._texture = value;\n        this._textureID = -1;\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */\n    multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * Updates matrices if texture was changed.\n     * @param [forceUpdate=false] - if true, matrices will be updated any case\n     * @returns - Whether or not it was updated\n     */\n    update(forceUpdate?: boolean): boolean\n    {\n        const tex = this._texture;\n\n        if (!tex || !tex.valid)\n        {\n            return false;\n        }\n\n        if (!forceUpdate\n            && this._textureID === tex._updateID)\n        {\n            return false;\n        }\n\n        this._textureID = tex._updateID;\n        this._updateID++;\n\n        const uvs = tex._uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,\n                -trim.x / trim.width, -trim.y / trim.height);\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.baseTexture;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase.resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n        this.uClampOffset[0] = offset / texBase.realWidth;\n        this.uClampOffset[1] = offset / texBase.realHeight;\n\n        this.isSimple = tex._frame.width === texBase.width\n            && tex._frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n"],"names":[],"mappings":"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"}