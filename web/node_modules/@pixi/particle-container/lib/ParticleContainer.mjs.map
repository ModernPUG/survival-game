{"version":3,"file":"ParticleContainer.mjs","sources":["../src/ParticleContainer.ts"],"sourcesContent":["import { BLEND_MODES, utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\n\nimport type { BaseTexture, Renderer } from '@pixi/core';\nimport type { ParticleBuffer } from './ParticleBuffer';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Sprite } from '@pixi/sprite';\n\nexport interface IParticleProperties\n{\n    vertices?: boolean;\n    position?: boolean;\n    rotation?: boolean;\n    uvs?: boolean;\n    tint?: boolean;\n    alpha?: boolean;\n    scale?: boolean;\n}\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use. And here you have a hundred sprites that will be rendered at the speed of light.\n * @example\n * import { ParticleContainer, Sprite } from 'pixi.js';\n *\n * const container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = Sprite.from('myImage.png');\n *     container.addChild(sprite);\n * }\n * @memberof PIXI\n */\nexport class ParticleContainer extends Container<Sprite>\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n     * to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n\n    /**\n     * If true, container allocates more batches in case there are more than `maxSize` particles.\n     * @default false\n     */\n    public autoResize: boolean;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * Default to true here as performance is usually the priority for particles.\n     * @default true\n     */\n    public roundPixels: boolean;\n\n    /**\n     * The texture used to render the children.\n     * @readonly\n     */\n    public baseTexture: BaseTexture;\n    public tintRgb: Float32Array;\n\n    /** @private */\n    _maxSize: number;\n\n    /** @private */\n    _buffers: ParticleBuffer[];\n\n    /** @private */\n    _batchSize: number;\n\n    /**\n     * Set properties to be dynamic (true) / static (false).\n     * @private\n     */\n    _properties: boolean[];\n\n    /**\n     * For every batch, stores _updateID corresponding to the last change in that batch.\n     * @private\n     */\n    _bufferUpdateIDs: number[];\n\n    /**\n     * When child inserted, removed or changes position this number goes up.\n     * @private\n     */\n    _updateID: number;\n\n    /**\n     * The tint applied to the container.\n     * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    /**\n     * @param maxSize - The maximum number of particles that can be rendered by the container.\n     *  Affects size of allocated buffers.\n     * @param properties - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n     *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n     * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n     * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n     *  there are more than `maxSize` particles.\n     */\n    constructor(maxSize = 1500, properties?: IParticleProperties, batchSize = 16384, autoResize = false)\n    {\n        super();\n\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        const maxBatchSize = 16384;\n\n        if (batchSize > maxBatchSize)\n        {\n            batchSize = maxBatchSize;\n        }\n\n        this._properties = [false, true, false, false, false];\n        this._maxSize = maxSize;\n        this._batchSize = batchSize;\n        this._buffers = null;\n        this._bufferUpdateIDs = [];\n        this._updateID = 0;\n\n        this.interactiveChildren = false;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this.autoResize = autoResize;\n        this.roundPixels = true;\n        this.baseTexture = null;\n\n        this.setProperties(properties);\n\n        this._tint = 0;\n        this.tintRgb = new Float32Array(4);\n        this.tint = 0xFFFFFF;\n    }\n\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     * @param properties - The properties to be uploaded\n     */\n    public setProperties(properties: IParticleProperties): void\n    {\n        if (properties)\n        {\n            this._properties[0] = 'vertices' in properties || 'scale' in properties\n                ? !!properties.vertices || !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'tint' in properties || 'alpha' in properties\n                ? !!properties.tint || !!properties.alpha : this._properties[4];\n        }\n    }\n\n    updateTransform(): void\n    {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n    }\n\n    /**\n     * The tint applied to the container. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        utils.hex2rgb(value, this.tintRgb);\n    }\n\n    /**\n     * Renders the container using the WebGL renderer.\n     * @param renderer - The WebGL renderer.\n     */\n    public render(renderer: Renderer): void\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n\n        if (!this.baseTexture)\n        {\n            this.baseTexture = this.children[0]._texture.baseTexture;\n            if (!this.baseTexture.valid)\n            {\n                this.baseTexture.once('update', () => this.onChildrenChange(0));\n            }\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    }\n\n    /**\n     * Set the flag that static data should be updated to true\n     * @param smallestChildIndex - The smallest child index.\n     */\n    protected onChildrenChange(smallestChildIndex: number): void\n    {\n        const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n        while (this._bufferUpdateIDs.length < bufferIndex)\n        {\n            this._bufferUpdateIDs.push(0);\n        }\n        this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n    }\n\n    public dispose(): void\n    {\n        if (this._buffers)\n        {\n            for (let i = 0; i < this._buffers.length; ++i)\n            {\n                this._buffers[i].destroy();\n            }\n\n            this._buffers = null;\n        }\n    }\n\n    /**\n     * Destroys the container\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this.dispose();\n\n        this._properties = null;\n        this._buffers = null;\n        this._bufferUpdateIDs = null;\n    }\n}\n"],"names":[],"mappings":"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"}